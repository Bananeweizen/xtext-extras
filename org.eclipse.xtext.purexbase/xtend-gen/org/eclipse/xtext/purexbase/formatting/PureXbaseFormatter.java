/**
 * generated by Xtext
 */
package org.eclipse.xtext.purexbase.formatting;

import com.google.inject.Inject;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.purexbase.services.PureXbaseGrammarAccess;
import org.eclipse.xtext.xbase.formatting.XbaseFormatter;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom formatting description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class PureXbaseFormatter extends AbstractDeclarativeFormatter {
  @Inject
  @Extension
  private PureXbaseGrammarAccess _pureXbaseGrammarAccess;
  
  @Inject
  private XbaseFormatter xbaseFormatter;
  
  @Override
  protected void configureFormatting(final FormattingConfig c) {
    this.xbaseFormatter.configure(c, this._pureXbaseGrammarAccess.getXbaseGrammarAccess());
    final PureXbaseGrammarAccess.SpecialBlockExpressionElements sbee = this._pureXbaseGrammarAccess.getSpecialBlockExpressionAccess();
    c.setLinewrap(1, 2, 3).after(sbee.getExpressionsAssignment_1_0());
    c.setLinewrap(1, 2, 3).after(sbee.getSemicolonKeyword_1_1());
    c.setNoSpace().before(sbee.getSemicolonKeyword_1_1());
    c.setLinewrap(1, 2, 3).after(this._pureXbaseGrammarAccess.getXImportSectionAccess().getImportDeclarationsAssignment());
    c.setLinewrap(0, 1, 3).before(this._pureXbaseGrammarAccess.getSL_COMMENTRule());
    c.setLinewrap(0, 1, 3).before(this._pureXbaseGrammarAccess.getML_COMMENTRule());
    c.setLinewrap(0, 1, 3).after(this._pureXbaseGrammarAccess.getML_COMMENTRule());
  }
}
