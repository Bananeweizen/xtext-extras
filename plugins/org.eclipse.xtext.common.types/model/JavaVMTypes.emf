@namespace(uri="http://www.eclipse.org/xtext/common/JavaVMTypes", prefix="types")
package types;

abstract class JvmIdentifyableElement {
  op String getCanonicalName();
}

abstract class JvmType extends JvmIdentifyableElement {
/*
  op boolean isValidReturnType();
  op boolean isValidParameterType();
  op boolean isValidTypeArgument();
*/
}

class JvmVoid extends JvmType {
}

abstract class JvmComponentType extends JvmType {
  val JvmArrayType arrayType;
}

class JvmPrimitiveType extends JvmComponentType {
  attr String name;
}

class JvmArrayType extends JvmComponentType {
  op int getDimensions();
  val JvmTypeReference componentType;
}

abstract class JvmDeclaredType extends JvmComponentType, JvmMember {
  op String getPackageName();
  val JvmTypeReference[*] superTypes;
  val JvmMember[*]#declaringType members;
  attr boolean ~abstract;
  attr boolean static;
  attr boolean final;
}

class JvmTypeParameter extends JvmComponentType, JvmConstraintOwner {
  attr String name;
  ref JvmTypeParameterDeclarator#typeParameters declarator;
}

abstract class JvmTypeParameterDeclarator {
  val JvmTypeParameter[*]#declarator typeParameters;
}

abstract class JvmConstraintOwner extends JvmIdentifyableElement {
  op String getCanonicalName();
  val JvmTypeConstraint[*]#owner constraints;
}

abstract class JvmTypeConstraint extends JvmIdentifyableElement {
  val JvmTypeReference typeReference;
  ref JvmConstraintOwner#constraints owner;
}

class JvmUpperBound extends JvmTypeConstraint {
}

class JvmLowerBound extends JvmTypeConstraint {
}

class JvmAnnotationType extends JvmDeclaredType {
}

class JvmEnumerationType extends JvmDeclaredType {
  val JvmEnumerationLiteral[*]#enumType literals;
}

class JvmEnumerationLiteral extends JvmIdentifyableElement {
  ref JvmEnumerationType#literals enumType;
}

class JvmGenericType extends JvmDeclaredType, JvmTypeParameterDeclarator {
  attr boolean ~interface;
  op Iterable<JvmType> getExtendedInterfaces();
  op Iterable<JvmType> getExtendedClasses();
  op boolean isInstantiateable(); 
}

abstract class JvmTypeReference extends JvmIdentifyableElement {
  op JvmType getType();
}

class JvmParameterizedTypeReference extends JvmTypeReference {
  val JvmTypeArgument[*]#declarator arguments;
  ref JvmType type;
}

class JvmGenericArrayTypeReference extends JvmTypeReference {
  val JvmArrayType type;  
}

abstract class JvmTypeArgument extends JvmIdentifyableElement {
  ref JvmParameterizedTypeReference#arguments declarator;
}

class JvmWildcardTypeArgument extends JvmTypeArgument, JvmConstraintOwner {
}

class JvmReferenceTypeArgument extends JvmTypeArgument {
  val JvmTypeReference typeReference;
}

abstract class JvmMember extends JvmAnnotationTarget, JvmIdentifyableElement {
  ref JvmDeclaredType#members declaringType;
  attr JvmVisibility visibility;
  attr String fullyQualifiedName;
  op String getSimpleName();
}

abstract class JvmFeature extends JvmIdentifyableElement {
  op String getSimpleName();
}

enum JvmVisibility {
  DEFAULT = 0;
  PRIVATE = 1;
  PROTECTED = 2;
  PUBLIC = 3;
}

class JvmField extends JvmMember, JvmFeature {
  attr boolean static;
  attr boolean final;
  val JvmTypeReference type;
}

abstract class JvmExecutable extends JvmMember, JvmTypeParameterDeclarator {
  val JvmFormalParameter[*] parameters;
  val JvmTypeReference[*] exceptions;
}

class JvmConstructor extends JvmExecutable {
}

class JvmOperation extends JvmExecutable, JvmFeature {
  attr boolean static;
  attr boolean final;
  attr boolean ~abstract;
  val JvmTypeReference returnType;
}

class JvmFormalParameter extends JvmIdentifyableElement {
  attr String name;
  val JvmTypeReference parameterType;
}

abstract class JvmAnnotationTarget {
  val JvmAnnotationReference[*]#target annotations;
}

class JvmAnnotationReference {
  ref JvmAnnotationType annotation;
  ref JvmAnnotationTarget#annotations target;
  val JvmAnnotationValue[*] values;
}

abstract class JvmAnnotationValue {
  op String getValueName();
  ref JvmOperation operation;   
}

class JvmIntAnnotationValue extends JvmAnnotationValue {
  attr int[*] values;   
}

class JvmBooleanAnnotationValue extends JvmAnnotationValue {
  attr boolean[*] values;   
}

class JvmByteAnnotationValue extends JvmAnnotationValue {
  attr byte[*] values;   
}

class JvmShortAnnotationValue extends JvmAnnotationValue {
  attr short[*] values;   
}

class JvmLongAnnotationValue extends JvmAnnotationValue {
  attr long[*] values;   
}

class JvmDoubleAnnotationValue extends JvmAnnotationValue {
  attr double[*] values;   
}

class JvmFloatAnnotationValue extends JvmAnnotationValue {
  attr float[*] values;   
}

class JvmCharAnnotationValue extends JvmAnnotationValue {
  attr char[*] values;   
}

class JvmStringAnnotationValue extends JvmAnnotationValue {
  attr String[*] values;   
}

class JvmTypeAnnotationValue extends JvmAnnotationValue {
  ref JvmType[*] values;   
}

class JvmAnnotationAnnotationValue extends JvmAnnotationValue, JvmAnnotationTarget {
  derived transient readonly ref JvmAnnotationReference[*] values;   
}

class JvmEnumAnnotationValue extends JvmAnnotationValue {
  ref JvmEnumerationLiteral[*] values;   
}

// important note: unfortunatly, emfatic does not support 
// generified datatypes, that's why you'll have to uncomment /
// comment the next lines and add the parameter type manually
datatype Iterable<E> : java.lang.Iterable;
//datatype Iterable : java.lang.Iterable;
