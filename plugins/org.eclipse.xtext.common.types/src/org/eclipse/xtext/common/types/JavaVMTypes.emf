@namespace(uri="http://www.eclipse.org/xtext/common/JavaVMTypes", prefix="types")
package types;

abstract class IdentifyableElement {
  op String getCanonicalName();
}

abstract class Type extends IdentifyableElement {
  op boolean isValidReturnType();
  op boolean isValidParameterType();
  op boolean isValidTypeArgument();
}

class Void extends Type {
}

abstract class ConstrainedType extends Type {
  val TypeConstraint[*]#constrainedType constraints;
}

abstract class ComponentType extends Type {
  val ArrayType#componentType arrayType;
}

class PrimitiveType extends ComponentType {
  attr String name;
}

class Wildcard extends ConstrainedType {
}

class ArrayType extends ComponentType {
  op int getDimensions();
  ref ComponentType#arrayType componentType;
}

abstract class DeclaredType extends ComponentType, Member {
  op String getPackageName();
  ref Type[*] superTypes;
  val Member[*]#declaringType members;
}

abstract class TypeParameterDeclarator extends IdentifyableElement {
  val TypeParameter[*]#declarator typeParameters;
}

class TypeParameter extends ComponentType, ConstrainedType {
  attr String name;
  ref TypeParameterDeclarator#typeParameters declarator;
}

abstract class TypeConstraint extends IdentifyableElement {
  ref Type referencedType;
  ref ConstrainedType#constraints constrainedType;
}

class UpperBound extends TypeConstraint {
}

class LowerBound extends TypeConstraint {
}

class AnnotationType extends DeclaredType {
}

class EnumerationType extends DeclaredType {
}

class GenericType extends DeclaredType, TypeParameterDeclarator {
  attr boolean ~abstract;
  attr boolean ~interface;
  attr boolean static;
  attr boolean final;
  op Type[*] getExtendedInterfaces();
  op Type[*] getExtendedClasses();
  op boolean isInstantiateable(); 
}

class ParameterizedType extends ComponentType {
  attr String fullyQualifiedName;
  val TypeArgument[*]#declarator arguments;
  ref Member#declaredParameterizedTypes declarator;
  ref Type rawType;
}

abstract class TypeArgument extends IdentifyableElement {
  ref ParameterizedType#arguments declarator;
}

class WildcardTypeArgument extends TypeArgument {
  val Wildcard wildcard;
}

class ReferenceTypeArgument extends TypeArgument {
  ref Type type;
}

abstract class Member extends AnnotationTarget, IdentifyableElement {
  ref DeclaredType#members declaringType;
  attr Visibility visibility;
  attr String fullyQualifiedName;
  op String getSimpleName();
  val ParameterizedType[*]#declarator declaredParameterizedTypes;
}

enum Visibility {
  DEFAULT = 0;
  PRIVATE = 1;
  PROTECTED = 2;
  PUBLIC = 3;
}

class Field extends Member {
  attr boolean static;
  attr boolean final;
  ref Type type;
}

abstract class Executable extends Member, TypeParameterDeclarator {
  val FormalParameter[*] parameters;
  ref Type[*] exceptions;
}

class Constructor extends Executable {
}

class Operation extends Executable {
  attr boolean static;
  attr boolean final;
  attr boolean ~abstract;
  ref Type returnType;
}

class FormalParameter extends IdentifyableElement {
  attr String name;
  ref Type parameterType;
}

abstract class AnnotationTarget {
  val AnnotationReference[*]#target annotations;
}

class AnnotationReference {
  ref AnnotationType annotation;
  ref AnnotationTarget#annotations target;
}


