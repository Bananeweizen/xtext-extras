«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»

«EXTENSION org::eclipse::xtext::Extensions»
«EXTENSION org::eclipse::xtext::Properties»
«EXTENSION org::eclipse::xtext::TokenTypesGen»

«DEFINE file FOR Grammar»
«FILE pathName()+'/parser/internal/'+languageName()+'TokenTypeResolver.java'-»
package «packageName()».parser.internal;

import org.eclipse.emf.ecore.EObject;
import «packageName()».«tokenTypesInterfaceName()»;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.ITokenTypes;
import org.eclipse.xtext.parser.ParseException;
import org.eclipse.xtext.parsetree.AbstractNode;

public class «languageName()»TokenTypeResolver {

	public static LexerRule getLexerRule(AbstractNode context, int antlrTokenType) {
		switch(antlrTokenType) {		
		«EXPAND lexerRuleCase(this) FOREACH antlrTokenTypes()»
		default:
			return null;
		}	
	}
	
	@SuppressWarnings("unused")
	private static EObject getGrammarElement(String id) {
		return LanguageFacadeFactory.getFacade("«languageId()»").getGrammar().eResource().getEObject(id);
	}
	
}
«ENDFILE»
«ENDDEFINE»

«DEFINE lexerRuleCase(Grammar g) FOR Object»
	«IF g.lexerRule(this) != null-»
		case «this.toString()»:
			// «antlrTokenName(this)»
			«IF g.lexerRule(this).isBuiltinRule()-»
			return BuiltinRules.BUILTIN_«g.lexerRule(this).name»;
			«ELSE-»
			return (LexerRule) getGrammarElement("«g.lexerRule(this).getID()»");
			«ENDIF-»
	«ENDIF-»
«ENDDEFINE»


