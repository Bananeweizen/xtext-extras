«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»

«EXTENSION org::eclipse::xtext::grammargen::GrammarGen»

«DEFINE file FOR Grammar»
«FILE pathName()+'/'+languageName()+'Constants.java'-»
package «packageName()»;

import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Grammar;

public class «languageName()»Constants extends org.eclipse.xtext.core.parser.BaseEPackageAccess {
	public static final String «languageName().toUpperCase()»_GRAMMAR_CP_URI = "«pathName()»/«languageName()».xmi";
	private static Grammar GRAMMAR = null;
	
	public static Grammar get«languageName()»Grammar() {	
		if (GRAMMAR==null) {
			GRAMMAR = (Grammar) loadGrammarFile(«languageName()»Constants.class.getClassLoader(),«languageName().toUpperCase()»_GRAMMAR_CP_URI);
		}
		return GRAMMAR;
	}
	

	«FOREACH metamodelDeclarations.typeSelect(GeneratedMetamodel) AS gmm»
	public static final String «gmm.name.toUpperCase()»_NS_URI = "«gmm.nsURI.trimFromStartAndEnd(1)»";
	public static final String «gmm.name.toUpperCase()»_CP_URI = "«pathName()»/«gmm.name».ecore";
	
	public static EPackage get«gmm.name»EPackage() {	
		if (!EPackage.Registry.INSTANCE.containsKey(«gmm.name.toUpperCase()»_NS_URI)) {
			EPackage p = loadEcoreFile(«languageName()»Constants.class.getClassLoader(),«gmm.name.toUpperCase()»_CP_URI);
			if (p!=null) {
				EPackage.Registry.INSTANCE.put(«gmm.name.toUpperCase()»_NS_URI,p);
			}
		}
		return EPackage.Registry.INSTANCE.getEPackage(«gmm.name.toUpperCase()»_NS_URI);
	}
	«ENDFOREACH»

}
«ENDFILE»
«ENDDEFINE»