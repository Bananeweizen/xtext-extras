/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
import xtext;
import xtextgen;

extension org::eclipse::xtext::Extensions;

GenModel genModel() :
	GLOBALVAR genModel;
	
boolean generateMergedPluginXml() :
	GLOBALVAR generateMergedPluginXml;
	
nonUiServices(GenModel this):
	this.services.select(e|e.uiService==false);

modelFileExtensions() :
	genModel().modelFileExtensions;

fileHeader() :
	genModel().fileHeader;
	
grammar() :
	genModel().grammar;
	
objectURI(emf::EObject object) :
	object.containingGrammar().grammarResourceURI()+'#'+getFragment(object);

grammarResourceURI(Grammar this) :
	'classpath:/'+getClasspathRelativePathToXmi(this);
	
classPathURI(GeneratedMetamodel this) :
	'classpath:/'+((Grammar)eContainer).getNamespace().replaceAll("\\.","/")+'/'+name+'.ecore';
	
String languageName() :
	grammar().getName().replaceAll("\\s","_");
	
languageId() :
	grammar().getId();
	
languageNamespace() :
	grammar().getNamespace();

toPath(String fqName) :
	fqName.replaceAll("\\.", "/");
	
toJavaFilePath(String fqClassName) :
	toPath(fqClassName) + ".java";
	
toXtendFilePath(String fqClassName) :
	toPath(fqClassName) + ".ext";
	
toXtendFqName(String fqName) :
	fqName.replaceAll("\\.", "::");
	
toJavaPackage(String fqName) :
	skipLastToken(fqName, '.');
	
toSimpleName(String fqName) :
	lastToken(fqName, '.');
	
standaloneSetupClass(Grammar this) :
	getNamespace() + "." + getName()+ "StandaloneSetup";
	
uiSetupClass(Grammar this) :
	getNamespace() + "." + getName() + "UiSetup";

// module classes start
runtimeModuleClass(Grammar this) :
	getNamespace() + "." + getName() + "RuntimeModule";

generatedRuntimeModuleClass(Grammar this) :
	grammar().getNamespace()+".Abstract"+grammar().getName() + "RuntimeModule";	
	
uiModuleClass(Grammar this) :
	getNamespace() + "." + getName() + "UIModule";
	
generatedUiModuleClass(Grammar this) :
	grammar().getNamespace()+".Abstract"+grammar().getName() + "UiModule";	

// module classes end

uiGenProposalProviderClass(Grammar this) :
	getNamespace() + "." + getName() + "GenProposalProvider";

tokenScannerClass(Grammar this) :
	getNamespace() + "." + getName() + "TokenScanner";
	
languageInterface(Grammar this) :
	getNamespace() + ".I"+getName();

private String skipLastToken(String s, String separator) :
	JAVA org.eclipse.xtext.util.Strings.skipLastToken(java.lang.String, java.lang.String);
	
private String lastToken(String s, String separator) :
	JAVA org.eclipse.xtext.util.Strings.lastToken(java.lang.String, java.lang.String);
	
outletPath(String name) :
	outletPath(genModel(), name);

private String outletPath(GenModel model, String name) :
	JAVA org.eclipse.xtext.GenExtensions.outletPath(org.eclipse.xtext.xtextgen.GenModel, java.lang.String);

Void copyFiles(String srcDir, String targetDir, List[String] fileNames) :
	JAVA org.eclipse.xtext.util.Files.copyFiles(java.lang.String, java.lang.String, java.util.List);

GenService findService(String serviceInterfaceFQName) :
	genModel().services.select(s|s.serviceInterfaceFQName==serviceInterfaceFQName).first();

GenService resourceFactoryService() :
	findService("org.eclipse.xtext.resource.IResourceFactory") != null 
		? findService("org.eclipse.xtext.resource.IResourceFactory")
		: null;
		
List[PluginDependency] pluginDependencies(GenModel this, boolean isUI) :
	services.select(s|s.uiService == isUI && !s.pluginDependencies.isEmpty).pluginDependencies;
	
String manifestEntry(PluginDependency this) :
	bundleID 
		+ ((version != null && version != "") ? ";bundle-version=" + version : "")
		+ ((^reexport) ? ";visibility:=reexport" : "")
		+ ((optional) ? ";resolution:=optional" : ""); 

