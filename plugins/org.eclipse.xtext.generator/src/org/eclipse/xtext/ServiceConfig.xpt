«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»
«IMPORT xtextgen»

«EXTENSION org::eclipse::xtext::Extensions»
«EXTENSION org::eclipse::xtext::Properties»

«DEFINE root FOR GenModel»
«IF !grammar().isAbstract()»
«FILE generatedRuntimeModuleClass().toJavaFilePath() SRC_GEN -»
/*
«fileHeader()»
*/
package «generatedRuntimeModuleClass().toJavaPackage()»;

import org.eclipse.xtext.service.DefaultRuntimeModule;
import org.eclipse.xtext.service.IServiceScope;

import com.google.inject.Binder;

/**
 * GENERATED! Manual modification goes to «runtimeModuleClass().toSimpleName()»
 */
public abstract class «generatedRuntimeModuleClass().toSimpleName()» extends DefaultRuntimeModule {
	
	@Override
	public void configure(Binder binder) {
		super.configure(binder);
		binder.bind(IServiceScope.class).toInstance(«languageInterface(grammar)».SCOPE);
	}
	
	«FOREACH services.select(e|!e.uiService) AS s-»
	@Override
	protected Class<? extends «s.serviceInterfaceFQName»> get«s.serviceInterfaceFQName.toSimpleName()»() {
		return «s.genClassFQName».class;
	}
	«ENDFOREACH»
	
}
«ENDFILE»

«FILE runtimeModuleClass().toJavaFilePath() SRC -»
/*
«fileHeader()»
*/
package «runtimeModuleClass().toJavaPackage()»;

import com.google.inject.Binder;

/**
 * used to register components to be used within the IDE.
 */
public class «runtimeModuleClass().toSimpleName()» extends «generatedRuntimeModuleClass().toSimpleName()» {

	@Override
	public void configure(Binder binder) {
		super.configure(binder);
	}
	
}
«ENDFILE»

«ENDIF»
«ENDDEFINE»
