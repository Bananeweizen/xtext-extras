«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»
«IMPORT xtextgen»

«EXTENSION org::eclipse::xtext::Extensions»
«EXTENSION org::eclipse::xtext::Properties»

«DEFINE root FOR GenModel»
«FILE grammar().standaloneSetupClass().toJavaFilePath()-»
/*
«fileHeader()»
*/
package «grammar().standaloneSetupClass().toJavaPackage()»;

import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.resource.IResourceFactory;
import org.eclipse.xtext.service.IServiceScope;
import org.eclipse.xtext.service.ServiceRegistry;
import org.eclipse.xtext.service.IServiceRegistrationFactory.IServiceRegistration;

import «languageInterfaceFQName»;

public abstract class «grammar().standaloneSetupClass().toSimpleName()» {

	private static boolean isInitialized = false;

	public synchronized static void doSetup() {
		if(!isInitialized) {
			// setup super language first
			«standaloneSetupClass(grammar().getSuperGrammar())».doSetup();
			
			for (IServiceRegistration reg :  new «runtimeConfigClass(grammar())»().registrations()) {
				ServiceRegistry.registerFactory(reg.scope(), reg.serviceFactory(), reg.priority());
			}
			
			«IF resourceFactoryService() != null-»
			// register resource factory to EMF
			IResourceFactory resourceFactory = new «resourceFactoryService().genClassFQName»();
			«FOREACH modelFileExtensions() AS modelFileExtension-»
			Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("«modelFileExtension»", resourceFactory);
			«ENDFOREACH»
			«ENDIF»
			// initialize EPackages
			«FOREACH grammar().metamodelDeclarations.typeSelect(GeneratedMetamodel) AS mmd»
				if (!EPackage.Registry.INSTANCE.containsKey("«mmd.nsURI»")) {
					EPackage «mmd.name» = EcoreUtil2.loadEPackage(
							"«classPathURI(mmd)»",
							«standaloneSetupClass(grammar()).toSimpleName()».class.getClassLoader());
					if («mmd.name» == null)
						throw new IllegalStateException(
								"Couldn't load EPackage from '«classPathURI(mmd)»'");
					EPackage.Registry.INSTANCE.put("«mmd.nsURI»", «mmd.name»);
				}
			«ENDFOREACH»
			isInitialized = true;
		}
	}
	
	public static IServiceScope getServiceScope() {
		return «languageInterface(grammar())».SCOPE;
	}
}
«ENDFILE»

«FILE runtimeConfigClass(grammar()).toJavaPackage().toPath()+"/Abstract"+runtimeConfigClass(grammar()).toSimpleName()+".java"-»
package «runtimeConfigClass(grammar()).toJavaPackage()»;

import java.util.Set;

import org.eclipse.xtext.service.AbstractServiceRegistrationFactory;

/**
 * used to register components to be used at runtime.
 */
public class Abstract«runtimeConfigClass(grammar()).toSimpleName()» extends AbstractServiceRegistrationFactory {

	public Set<IServiceRegistration> registrations() {
		return scope(«languageInterface(grammar())».SCOPE)
		«FOREACH genModel().nonUiServices() AS s-»
		.with(«s.serviceInterfaceFQName».class, «s.genClassFQName».class)
		«ENDFOREACH»
			.registrations();
	}

}
			
«ENDFILE»
«FILE runtimeConfigClass(grammar()).toJavaFilePath() SRC-»
package «runtimeConfigClass(grammar()).toJavaPackage()»;

import java.util.Set;

import org.eclipse.xtext.service.AbstractServiceRegistrationFactory;

/**
 * used to register components to be used at runtime.
 */
public class «runtimeConfigClass(grammar()).toSimpleName()» extends Abstract«runtimeConfigClass(grammar()).toSimpleName()» {

	public Set<IServiceRegistration> registrations() {
		Set<IServiceRegistration> generated = super.registrations();
		// do stuff 
		return generated;
	}

}
			
«ENDFILE»
«ENDDEFINE»
