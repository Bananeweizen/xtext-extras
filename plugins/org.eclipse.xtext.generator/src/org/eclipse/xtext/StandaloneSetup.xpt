«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»
«IMPORT xtextgen»

«EXTENSION org::eclipse::xtext::Extensions»
«EXTENSION org::eclipse::xtext::Properties»

«DEFINE root FOR GenModel»
«FILE grammar().standaloneSetupClass().toJavaFilePath() SRC_GEN-»
/*
«fileHeader()»
*/
package «grammar().standaloneSetupClass().toJavaPackage()»;

import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.ISetup;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.resource.IResourceFactory;

import com.google.inject.Guice;
import com.google.inject.Injector;

/**
 * Generated from StandaloneSetup.xpt!
 */
public class «grammar().standaloneSetupClass().toSimpleName()» implements ISetup {

	public static void doSetup() {
		new «grammar().standaloneSetupClass().toSimpleName()»().createInjectorAndDoEMFRegistration();
	}

	public Injector createInjectorAndDoEMFRegistration() {
		«IF grammar.getSuperGrammar()!=null»
		«grammar.getSuperGrammar().standaloneSetupClass()».doSetup();
		«ELSE-»
		// register default ePackages
		if (!Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().containsKey("ecore"))
			Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(
				"ecore", new org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl());
		if (!Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().containsKey("xmi"))
			Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(
				"xmi", new org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl());
		if (!EPackage.Registry.INSTANCE.containsKey(org.eclipse.xtext.XtextPackage.eNS_URI))
			EPackage.Registry.INSTANCE.put(org.eclipse.xtext.XtextPackage.eNS_URI, org.eclipse.xtext.XtextPackage.eINSTANCE);
		«ENDIF-»
		registerEPackages();
		«IF !grammar.isAbstract()-»
		Injector injector = createInjector();
		IResourceFactory resourceFactory = injector.getInstance(IResourceFactory.class);
		registerResourceFactory(resourceFactory);
		return injector;
		«ELSE-»
		return null;
		«ENDIF-»
	}
	
	«IF !grammar.isAbstract()-»
	public Injector createInjector() {
		return Guice.createInjector(new «grammar().runtimeModuleClass()»());
	}
	
	public void registerResourceFactory(IResourceFactory resourceFactory) {
		«FOREACH modelFileExtensions() AS modelFileExtension-»
		Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("«modelFileExtension»", resourceFactory);
		«ENDFOREACH»
	}
	«ENDIF-»

	/**
	 * Initializes all EPackages generated for this language and registers them with EPackage.Registry.INSTANCE
	 */	
	public void registerEPackages() {
		«FOREACH grammar().metamodelDeclarations.typeSelect(GeneratedMetamodel) AS mmd-»
		if (!EPackage.Registry.INSTANCE.containsKey("«mmd.ePackage.nsURI»")) {
			EPackage «mmd.name» = EcoreUtil2.loadEPackage(
				"«classPathURI(mmd)»",
				«standaloneSetupClass(grammar()).toSimpleName()».class.getClassLoader());
			if («mmd.name» == null)
				throw new IllegalStateException(
					"Couldn't load EPackage from '«classPathURI(mmd)»'");
			EPackage.Registry.INSTANCE.put("«mmd.ePackage.nsURI»", «mmd.name»);
		}
		«ENDFOREACH-»
	}
	
}
«ENDFILE»

«ENDDEFINE»
