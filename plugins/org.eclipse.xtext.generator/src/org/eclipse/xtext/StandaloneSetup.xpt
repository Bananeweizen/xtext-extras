«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»
«IMPORT xtextgen»

«EXTENSION org::eclipse::xtext::Extensions»
«EXTENSION org::eclipse::xtext::Properties»

«DEFINE root FOR GenModel»
«FILE standaloneSetupClassFQName.toJavaFilePath()-»
/*
«fileHeader()»
*/
package «standaloneSetupClassFQName.toJavaPackage()»;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.xtext.builtin.XtextBuiltinStandaloneSetup;
import org.eclipse.xtext.service.ILanguageDescriptor;
import org.eclipse.xtext.service.LanguageDescriptorFactory;
import org.eclipse.xtext.service.ServiceRegistry;
«FOREACH genModel().nonUiServices() AS s-»
import «s.serviceInterfaceFQName»;
import «s.genClassFQName»;
«ENDFOREACH-»

import «languageInterfaceFQName»;

public abstract class «standaloneSetupClassFQName.toSimpleName()» {

	private static boolean isInitialized = false;

	public synchronized static void doSetup() {
		if(!isInitialized) {
			«IF grammar().getSuperGrammar()!=null»
			// setup super language first
			XtextBuiltinStandaloneSetup.doSetup();
			«ENDIF»Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(
				"ecore", new XMIResourceFactoryImpl());
			Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(
				"xmi", new XMIResourceFactoryImpl());
			ILanguageDescriptor languageDescriptor = 
				LanguageDescriptorFactory.createLanguageDescriptor(
					«languageInterfaceFQName.toSimpleName()».ID, 
					«languageInterfaceFQName.toSimpleName()».NAME, 
					«languageInterfaceFQName.toSimpleName()».NAMESPACE, 
					LanguageDescriptorFactory.get("«grammar().getSuperGrammar().getId()»"));
			«FOREACH genModel().nonUiServices() AS s-»
			ServiceRegistry.registerService(languageDescriptor, «s.serviceInterfaceFQName.toSimpleName()».class, «s.genClassFQName.toSimpleName()».class);
			«ENDFOREACH»
			«IF resourceFactoryService() != null-»
			// register resource factory to EMF
			IResourceFactory resourceFactory = new «resourceFactoryService().genClassFQName.toSimpleName()»();
			«FOREACH modelFileExtensions() AS modelFileExtension-»
			Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("«modelFileExtension»", resourceFactory);
			«ENDFOREACH»
			«ENDIF»
			isInitialized = true;
		}
	}
	
	public static ILanguageDescriptor getLanguageDescriptor() {
		if(!isInitialized) {
			doSetup();
		}
		return LanguageDescriptorFactory.get(«languageInterfaceFQName.toSimpleName()».ID);
	}
			
}
«ENDFILE»
«ENDDEFINE»
