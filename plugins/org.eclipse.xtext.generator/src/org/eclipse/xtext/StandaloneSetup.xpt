«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»
«IMPORT xtextgen»

«EXTENSION org::eclipse::xtext::Extensions»
«EXTENSION org::eclipse::xtext::Properties»

«DEFINE root FOR GenModel»
«FILE grammar().standaloneSetupClass().toJavaFilePath() SRC_GEN-»
/*
«fileHeader()»
*/
package «grammar().standaloneSetupClass().toJavaPackage()»;

import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.resource.IResourceFactory;
import org.eclipse.xtext.service.IServiceScope;
import org.eclipse.xtext.service.ServiceRegistry;

import com.google.inject.Guice;
import com.google.inject.Injector;

import «languageInterfaceFQName»;

public abstract class «grammar().standaloneSetupClass().toSimpleName()» {

	private static boolean isInitialized = false;

	public synchronized static void doSetup() {
		if(!isInitialized) {
		    «IF !grammar.isAbstract()»
		    Injector injector = Guice.createInjector(new «grammar().runtimeModuleClass()»());
			ServiceRegistry.registerInjector(«languageInterfaceFQName».SCOPE, injector);
			«ENDIF»
			
			«IF grammar.getSuperGrammar()!=null»
			«grammar.getSuperGrammar().standaloneSetupClass()».doSetup();
			«ENDIF»
			
			«IF resourceFactoryService() != null-»
			// register resource factory to EMF
			IResourceFactory resourceFactory = new «resourceFactoryService().genClassFQName»();
			«FOREACH modelFileExtensions() AS modelFileExtension-»
			Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("«modelFileExtension»", resourceFactory);
			«ENDFOREACH»
			«ENDIF»
			// initialize EPackages
			«FOREACH grammar().metamodelDeclarations.typeSelect(GeneratedMetamodel) AS mmd»
				if (!EPackage.Registry.INSTANCE.containsKey("«mmd.ePackage.nsURI»")) {
					EPackage «mmd.name» = EcoreUtil2.loadEPackage(
							"«classPathURI(mmd)»",
							«standaloneSetupClass(grammar()).toSimpleName()».class.getClassLoader());
					if («mmd.name» == null)
						throw new IllegalStateException(
								"Couldn't load EPackage from '«classPathURI(mmd)»'");
					EPackage.Registry.INSTANCE.put("«mmd.ePackage.nsURI»", «mmd.name»);
				}
			«ENDFOREACH»
			isInitialized = true;
		}
	}
	
	public static IServiceScope getServiceScope() {
	   doSetup();
	   return «languageInterfaceFQName».SCOPE;
	}
	
}
«ENDFILE»

«ENDDEFINE»
