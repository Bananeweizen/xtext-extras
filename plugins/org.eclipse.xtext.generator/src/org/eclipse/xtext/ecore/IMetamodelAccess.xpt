«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»
«IMPORT xtextgen»

«EXTENSION org::eclipse::xtext::Properties»
«EXTENSION org::eclipse::xtext::GrammarUtil»

«DEFINE metamodelAccess FOR GenService»
«FILE genClassFQName.toJavaFilePath() SRC_GEN-»
/*
«fileHeader()»
*/
package «genClassFQName.toJavaPackage()»;

import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.IMetamodelAccess;
import org.eclipse.xtext.parser.BaseEPackageAccess;

public class «genClassFQName.toSimpleName()» extends BaseEPackageAccess implements IMetamodelAccess {

«FOREACH grammar().metamodelDeclarations.typeSelect(GeneratedMetamodel) AS gmm-»
	protected static final String «gmm.name.toUpperCase()»_NS_URI = "«gmm.ePackage.nsURI»";
	
«ENDFOREACH-»
	
	public static void init() {
«FOREACH grammar().metamodelDeclarations.typeSelect(GeneratedMetamodel) AS gmm-»
		if (!EPackage.Registry.INSTANCE.containsKey(«gmm.name.toUpperCase()»_NS_URI))
			EPackage.Registry.INSTANCE.put(«gmm.name.toUpperCase()»_NS_URI, loadEcoreFile(«genClassFQName.toSimpleName()».class.getClassLoader(), "«gmm.classPathURI()»"));
«ENDFOREACH-»
	}

	static {
«IF grammar().getSuperGrammar() != null-»
		«grammar().getSuperGrammar().getNamespace()».services.«grammar().getSuperGrammar().getName()»MetamodelAccess.init();
«ENDIF-»
		init();
	}

	private EPackage[] generated = new EPackage[] {
		«FOREACH grammar().metamodelDeclarations.typeSelect(GeneratedMetamodel) AS gmm SEPARATOR ","-»
		get«gmm.name.toFirstUpper()»EPackage()
		«ENDFOREACH-»
	};

	public EPackage[] getGeneratedEPackages() {
		return generated;
	}

	private EPackage[] referenced = new EPackage[] {
		«FOREACH grammar().metamodelDeclarations.typeSelect(ReferencedMetamodel) AS rmm SEPARATOR ","-»
		BaseEPackageAccess.getEPackageFromRegistry("«rmm.ePackage.nsURI»")
		«ENDFOREACH-»
	};
	
	public EPackage[] getReferencedEPackages() {
		return referenced;
	}
	
	private EPackage[] all = new EPackage[] {
	    «grammar().metamodelDeclarations.typeSelect(GeneratedMetamodel).collect(gmm|'get'+gmm.name.toFirstUpper()+'EPackage()').
	    union(grammar().metamodelDeclarations.typeSelect(ReferencedMetamodel).collect(rmm|'BaseEPackageAccess.getEPackageFromRegistry("'+rmm.ePackage.nsURI+'")')).toString(',')»
	};
	
	public EPackage[] getAllEPackages() {
		return all;
	}
	
	«FOREACH grammar().metamodelDeclarations.typeSelect(GeneratedMetamodel) AS gmm-»
	protected EPackage get«gmm.name.toFirstUpper()»EPackage() {	
		return EPackage.Registry.INSTANCE.getEPackage(«gmm.name.toUpperCase()»_NS_URI);
	}
	
	«ENDFOREACH-»
}
«ENDFILE»
«ENDDEFINE»