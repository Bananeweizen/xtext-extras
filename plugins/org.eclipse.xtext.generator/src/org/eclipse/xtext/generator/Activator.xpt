«IMPORT org::eclipse::xtext»

«EXTENSION org::eclipse::xtext::generator::Naming»

«DEFINE file(String activatorName) FOR List[Grammar]»
«FILE activatorName.asPath()+".java" SRC_GEN_UI-»
/*
 «fileHeader()»
 */
package «activatorName.toJavaPackage()»;

import org.apache.log4j.Logger;

import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.osgi.framework.BundleContext;

import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.Module;
import com.google.inject.util.Modules;

import java.util.Map;
import java.util.HashMap;

/**
 * This class was generated. Customizations should only happen in a newly
 * introduced subclass. 
 */
public class «activatorName.toSimpleName()» extends AbstractUIPlugin {

	private Map<String,Injector> injectors = new HashMap<String,Injector>();
	private static «activatorName.toSimpleName()» INSTANCE;

	public Injector getInjector(String languageName) {
		return injectors.get(languageName);
	}
	
	@Override
	public void start(BundleContext context) throws Exception {
		super.start(context);
		INSTANCE = this;
		try {
			«FOREACH this AS grammar»
			injectors.put("«grammar.name»", Guice.createInjector(
				Modules.override(getRuntimeModule("«grammar.name»")).with(getSharedStateModule())).with(getUiModule("«grammar.name»"))
			));
			«ENDFOREACH»
		} catch (Exception e) {
			Logger.getLogger(getClass()).error(e.getMessage(), e);
			throw e;
		}
	}
	
	@Override
	public void stop(BundleContext context) throws Exception {
		injectors.clear();
		INSTANCE = null;
		super.stop(context);
	}
	
	public static «activatorName.toSimpleName()» getInstance() {
		return INSTANCE;
	}
	
	protected Module getRuntimeModule(String grammar) {
		«FOREACH this AS grammar»
		if ("«grammar.name»".equals(grammar)) {
		  return new «guiceModuleRt(grammar)»();
		}
		«ENDFOREACH»
		throw new IllegalArgumentException(grammar);
	}
	
	protected Module getUiModule(String grammar) {
		«FOREACH this AS grammar»
		if ("«grammar.name»".equals(grammar)) {
		  return new «guiceModuleUi(grammar)»(this);
		}
		«ENDFOREACH»
		throw new IllegalArgumentException(grammar);
	}
	
	protected Module getSharedStateModule() {
		return new org.eclipse.xtext.ui.shared.SharedStateModule();
	}
	
}
«ENDFILE»
«ENDDEFINE»