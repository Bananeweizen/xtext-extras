«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»
«IMPORT org::eclipse::xtext::generator»
«IMPORT org::eclipse::xtext»
«IMPORT xtextgen»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::generator::ModuleExtensions»

«DEFINE generate(Set[Binding] bindings) FOR Grammar»
«EXPAND guiceModuleRt»

«FILE guiceModuleRtGenerated().asPath()+".java" SRC_GEN»
/*
 «fileHeader()»
 */
package «guiceModuleRtGenerated().toJavaPackage()»;

import org.eclipse.xtext.Constants;
import org.eclipse.xtext.service.DefaultRuntimeModule;

import com.google.inject.Binder;
import com.google.inject.name.Names;

/**
 * Manual modifications go to {«guiceModuleRt()»}
 */
public abstract class «guiceModuleRtGenerated().toSimpleName()» extends DefaultRuntimeModule {
	
	@Override
	public void configure(Binder binder) {
		super.configure(binder);
		binder.bind(String.class).annotatedWith(Names.named(Constants.LANGUAGE_NAME)).toInstance(
			"«name»");
	}
	
	«EXPAND bindingMethod FOREACH bindings»
}
«ENDFILE»	
«ENDDEFINE»

	
«DEFINE guiceModuleRt FOR Grammar»
«FILE guiceModuleRt().asPath()+'.java' SRC -»
/*
 «fileHeader()»
 */
package «guiceModuleRt().toJavaPackage()»;

/**
 * Use this class to register components to be used within the IDE.
 */
public class «guiceModuleRt().toSimpleName()» extends «guiceModuleRtGenerated()» {

}
«ENDFILE»
«ENDDEFINE»


«DEFINE bindingMethod FOR Binding»
	// contributed by «contributedBy»
	«IF key.singleton»@org.eclipse.xtext.service.SingletonBinding«IF key.eagerSingleton»(eager=true)«ENDIF»«ENDIF-»
	public «IF value.expression==null»Class<? extends «key.type»>«ELSE»«key.type»«ENDIF» «bindMethodName(this)»() {
		return «IF value.expression!=null»«value.expression»«ELSE»«value.typeName».class«ENDIF»;
	}
«ENDDEFINE»
