«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::GrammarUtil»

«DEFINE pre FOR Grammar»
/*
*/
package «setup().toJavaPackage()»;

import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.ISetup;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.resource.IResourceFactory;

import com.google.inject.Guice;
import com.google.inject.Injector;

/**
 * Generated from StandaloneSetup.xpt!
 */
public class «setup().toSimpleName()» implements ISetup {

	public static void doSetup() {
		new «setup().toSimpleName()»().createInjectorAndDoEMFRegistration();
	}

	public Injector createInjectorAndDoEMFRegistration() {
		«IF getSuperGrammar()!=null»
		«getSuperGrammar().setup()».doSetup();
		«ELSE-»
		// register default ePackages
		if (!Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().containsKey("ecore"))
			Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(
				"ecore", new org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl());
		if (!Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().containsKey("xmi"))
			Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(
				"xmi", new org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl());
		if (!EPackage.Registry.INSTANCE.containsKey(org.eclipse.xtext.XtextPackage.eNS_URI))
			EPackage.Registry.INSTANCE.put(org.eclipse.xtext.XtextPackage.eNS_URI, org.eclipse.xtext.XtextPackage.eINSTANCE);
		«ENDIF-»
		«IF !isAbstract()-»
		Injector injector = createInjector();
		register(injector);
		return injector;
		«ELSE-»
		return null;
		«ENDIF-»
	}
	
	«IF !isAbstract()-»
	public Injector createInjector() {
		return Guice.createInjector(new «guiceModuleRt()»());
	}
	
	public void register(Injector injector) {
	«ENDIF-»
«ENDDEFINE»
		
«DEFINE post FOR Grammar»
	«IF !isAbstract()-»
	}
	«ENDIF-»
}
«ENDDEFINE»
