«REM»
/*******************************************************************************
 * Copyright (c) 2011 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext»

«EXTENSION org::eclipse::xtext::generator::junit::Junit4Fragment»
«EXTENSION org::eclipse::xtext::generator::Naming»

«DEFINE generate(Junit4Fragment junit4Fragment) FOR Grammar-»
«FILE qualifiedTestName().asPath()+".java" SRC_TEST -»
/*
«fileHeader()»
*/
package «qualifiedTestName().toJavaPackage()»;

import static junit.framework.Assert.assertNotNull;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.Constants;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.util.StringInputStream;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.google.inject.Inject;
import com.google.inject.name.Named;

@RunWith(XtextRunner.class)
@InjectWith(«qualifiedInjectorProviderName().toSimpleName()».class)
public class «qualifiedTestName().toSimpleName()» {
	
	@Inject
	private XtextResourceSet resourceSet;
	
	private String fileExtension;
	
	@Inject
	protected void setExtensions(@Named(Constants.FILE_EXTENSIONS) String extensions) {
		this.fileExtension = extensions.split(",")[0];
	}

	@Test
	public void loadModel() throws Exception {
		Resource resource = resourceSet.createResource(URI.createURI(String.format("«qualifiedTestName().toSimpleName()».%s",fileExtension)));
		resource.load(new StringInputStream("Hello Xtext!"), null);
		assertNotNull(resource.getEObject("/"));
	}
}
«ENDFILE»

«FILE qualifiedInjectorProviderName().asPath()+".java" SRC_GEN_TEST -»
/*
«fileHeader()»
*/
package «qualifiedInjectorProviderName().toJavaPackage()»;

import org.eclipse.xtext.junit.GlobalRegistries;
import org.eclipse.xtext.junit.GlobalRegistries.GlobalStateMemento;
import org.eclipse.xtext.junit4.IInjectorProvider;
import org.eclipse.xtext.junit4.IRegistryConfigurator;

import com.google.inject.Injector;

public class «qualifiedInjectorProviderName().toSimpleName()» implements IInjectorProvider, IRegistryConfigurator {
	private GlobalStateMemento globalStateMemento;
	private Injector injector;

	static {
		GlobalRegistries.initializeDefaults();
	}
	
	public Injector getInjector() {
		if (injector == null) {
			this.injector = new «setup().toSimpleName()»().createInjectorAndDoEMFRegistration();
		}
		return injector;
	}
	
	public void restoreRegistry() {
		globalStateMemento.restoreGlobalState();
	}

	public void setupRegistry() {
		globalStateMemento = GlobalRegistries.makeCopyOfGlobalState();
	}
	
}
«ENDFILE»


«FILE qualifiedUiInjectorProviderName().asPath()+".java" SRC_GEN_TEST -»
/*
«fileHeader()»
*/
package «qualifiedUiInjectorProviderName().toJavaPackage()»;

import org.eclipse.xtext.junit4.IInjectorProvider;

import com.google.inject.Injector;

public class «qualifiedUiInjectorProviderName().toSimpleName()» implements IInjectorProvider {
	
	public Injector getInjector() {
		return «activatorName()».getInstance().getInjector("«name»");
	}
	
}
«ENDFILE»

«IF junit4Fragment.genContentAssistTest»
«FILE qualifiedUiTestName().asPath()+".java" SRC_TEST -»
/*
«fileHeader()»
*/
package «qualifiedUiTestName().toJavaPackage()»;

import java.io.InputStream;

import org.eclipse.emf.common.util.URI;
import org.eclipse.xtext.Constants;
import org.eclipse.xtext.junit.util.ResourceLoadHelper;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.ui.junit.editor.contentassist.ContentAssistProcessorTestBuilder;
import org.eclipse.xtext.ui.junit.util.IResourcesSetupUtil;
import org.junit.After;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.google.inject.Inject;
import com.google.inject.name.Named;

@RunWith(XtextRunner.class)
@InjectWith(«qualifiedUiInjectorProviderName().toSimpleName()».class)
public class «qualifiedUiTestName().toSimpleName()» implements ResourceLoadHelper {
	
	String fileExtension;

    @Inject
    ContentAssistProcessorTestBuilder.Factory caBuilderfactory;

    @Inject
    private XtextResourceSet resourceSet;

    @Inject
    protected void setExtensions(
            @Named(Constants.FILE_EXTENSIONS) String extensions) {
        this.fileExtension = extensions.split(",")[0];
    }
	
	protected boolean doCleanWorkspace() {
		return true;
	}

	@After
	public void cleanWorkspace() throws Exception {
		if (doCleanWorkspace()) {
			IResourcesSetupUtil.cleanWorkspace();
		}
	}

	public XtextResource getResourceFor(InputStream stream) {
        try {
            XtextResource result = (XtextResource) resourceSet
                .createResource(URI.createURI(String.format("«qualifiedUiTestName().toSimpleName()».%s",fileExtension)));
            result.load(stream, null);
            return result;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testEmptyInput() throws Exception {
        newBuilder().assertText("Hello");
    }

    protected ContentAssistProcessorTestBuilder newBuilder() throws Exception {
        return caBuilderfactory.create(this);
    }

}
«ENDFILE»
«ENDIF»

«ENDDEFINE»

«DEFINE addToPluginXmlRt(Junit4Fragment junit4Fragment) FOR Grammar»«ENDDEFINE»

«DEFINE addToPluginXmlUi(Junit4Fragment junit4Fragment) FOR Grammar»«ENDDEFINE»

«DEFINE addToStandaloneSetup(Junit4Fragment junit4Fragment) FOR Grammar»«ENDDEFINE»