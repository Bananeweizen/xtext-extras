/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
import xtext;
import xtextgen;
import predicate;
import emf;
import oaw;

extension org::eclipse::xtext::GrammarUtil; 

String getParseTreeConstructorName(Grammar g) :
	JAVA org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorUtil.getParseTreeConstructorName(org.eclipse.xtext.Grammar);

String elementMethodName(AbstractElement ele):
	JAVA org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorUtil.getUniqueElementName(org.eclipse.xtext.AbstractElement);

List[AbstractElement] getNestedElementsFromAssignment(Assignment ass):
	JAVA org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorUtil.getNestedElementsFromAssignment(org.eclipse.xtext.Assignment);
	
boolean isAssignmentRequired(Assignment ass):
	JAVA org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorUtil.isAssignmentRequired(org.eclipse.xtext.Assignment);

boolean isRequired(String cardinality):
	cardinality == null || cardinality == '' || cardinality == '+';
	
boolean isOptional(String cardinality):
	cardinality == '*' || cardinality == '?';
	
boolean isMulti(String cardinality):
	cardinality == '*' || cardinality == '+';
	
String simpleName(Type type):
	type.name.split("::").last();




methodName(AbstractRule this) :
	'rule'+name.toFirstUpper();
		
List inverse(List this) :
	let x = {} : x.addAll(this) -> x.reverse();
	
	
List[String] internalCheckPath(AbstractElement this) : 
	if isOptionalCardinality() 
		then {"true"}.union(checkPath())
		else checkPath();
		
List[String] checkPath(AbstractElement this) : {"true"};
 
List[String] checkPath(Keyword this) : if isAssigned() then {'value.equals("'+value+'")'} else {'true'}; 

List[String] checkPath(Assignment this) : 
	{'obj.checkConsume("'+feature+'")'};
	
private ParserRule calledParserRule(RuleCall this) :
	if ParserRule.isInstance(rule) then rule;
	
List[String] checkPath(RuleCall this) : 
	{if calledParserRule()!=null then 'obj.isInstanceOf("'+calledParserRule().type.type.name+'")' else "true"};

		
List[String] checkPath(Alternatives this) : 
	groups.internalCheckPath();

List[String] checkPath(Group this) : 
	recCheckPath(this.abstractTokens.inverse(),0,null);
		
private List[String] recCheckPath(List[AbstractElement] abstractTokens, Integer counter, List[String] currentResult) :
	if abstractTokens.size<=counter 
		then currentResult
		else 
			(let newChecks = abstractTokens.get(counter).internalCheckPath():
			recCheckPath(abstractTokens,counter+1, 
				(if currentResult == null 
					then newChecks 
					else newChecks.collect(e1| currentResult.collect(e2|e2+'&&'+e1)).flatten()
				).toList())
			);
				
	