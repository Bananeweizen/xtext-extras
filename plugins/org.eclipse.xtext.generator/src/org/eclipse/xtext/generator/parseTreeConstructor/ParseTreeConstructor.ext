/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
import org::eclipse::xtext;

extension org::eclipse::xtext::GrammarUtil; 

String getParseTreeConstructorName(Grammar g) :
	JAVA org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorUtil.getParseTreeConstructorName(org.eclipse.xtext.Grammar);

String elementMethodName(AbstractElement ele):
	JAVA org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorUtil.getUniqueElementName(org.eclipse.xtext.AbstractElement);

List[AbstractElement] getNestedElementsFromAssignment(Assignment ass):
	JAVA org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorUtil.getNestedElementsFromAssignment(org.eclipse.xtext.Assignment);
	
boolean isAssignmentRequired(Assignment ass):
	JAVA org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorUtil.isAssignmentRequired(org.eclipse.xtext.Assignment);

boolean isRequired(String cardinality):
	cardinality == null || cardinality == '' || cardinality == '+';
	
boolean isOptional(String cardinality):
	cardinality == '*' || cardinality == '?';
	
boolean isMulti(String cardinality):
	cardinality == '*' || cardinality == '+';
	
//String simpleName(Type type):
//	type.name.split("::").last();

	