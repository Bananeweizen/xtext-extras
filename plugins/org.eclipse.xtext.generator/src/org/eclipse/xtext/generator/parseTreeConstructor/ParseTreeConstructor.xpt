«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext»
«IMPORT org::eclipse::xtext::parsetree::reconstr::impl»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::generator::parseTreeConstructor::ParseTreeConstructor»
«EXTENSION org::eclipse::xtext::GrammarUtil»
«EXTENSION org::eclipse::xtext::EcoreUtils»
«EXTENSION org::eclipse::xtext::generator::grammarAccess::GrammarAccess»


«DEFINE root FOR Grammar»
«FILE getParseTreeConstructorName().asPath()+".java" SRC_GEN-»
/*
«fileHeader()»
*/
package «getParseTreeConstructorName().toJavaPackage()»;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import «gaFQName()»;

import com.google.inject.Inject;

public class «getParseTreeConstructorName().toSimpleName()» extends AbstractParseTreeConstructor {
		
	@Inject
	private «gaSimpleName()» grammarAccess;
	
	@Override	
	public «gaSimpleName()» getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
«FOREACH calcRootFollowers() AS e ITERATOR i-»
			case «i.counter0»: return new «e.elementMethodName()»(this, this, «i.counter0», inst);
«ENDFOREACH-»
			default: return null;
		}	
	}	
}
	
«EXPAND rule FOREACH allParserRules()-»
}
«ENDFILE»
«ENDDEFINE»

«DEFINE rule FOR ParserRule-»
«IF !isDatatypeRule()»
/************ begin Rule «name» ****************
 *
«grammarFragmentToStr(" * ")»
 *
 **/
«EXPAND element FOR alternatives-»

/************ end Rule «name» ****************/
«ENDIF»
«ENDDEFINE»

«DEFINE constructor FOR AbstractElement-»
	public «elementMethodName()»(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public «getJavaTypeName().toSimpleName()» getGrammarElement() {
		return grammarAccess.«gaRuleElementAccessor()»;
	}

«EXPAND createFollowerMethod FOR getTreeConstState()-»
«IF !getTreeConstState().typesToCheck.isEmpty-»
    @Override
	public IInstanceDescription tryConsume() {
		if(«FOREACH getTreeConstState().typesToCheck AS e SEPARATOR " || \n\t\t   "»current.getDelegate().eClass() == grammarAccess.«e.gaTypeAccessor()».getClassifier()«ENDFOREACH»)
			return tryConsumeVal();
		return null;
	}

«ENDIF-»
«ENDDEFINE»


«DEFINE createFollowerMethod FOR TreeConstState-»
«IF enabledFollowers.size > 0 || endState-»
    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
«FOREACH enabledFollowers AS e-»
			case «e.precedence»: return new «e.target.element.elementMethodName()»(«e.ruleCall ? "this" : "parent"», this, «e.precedence», inst);
«ENDFOREACH-»
«IF endState && !enabledFollowers.exists(e|e.ruleCall)-»
			default: return parent.createParentFollower(this, index, index«enabledFollowers.size > 0 ? (" - " + enabledFollowers.size) : ""», inst);
«ELSE-»
			default: return null;
«ENDIF-»			
		}	
	}

«ENDIF-»
«ENDDEFINE»


«DEFINE createParentFollowerMethod(boolean isAss) FOR TreeConstState-»
«IF enabledFollowers.exists(e|e.ruleCall)-»
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
«IF isAss-»
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
«ENDIF-»	
		switch(index) {
«FOREACH enabledParentFollowers AS e-»
			case «e.precedence»: return new «e.target.element.elementMethodName()»(«e.ruleCall ? "this" : "parent"», next, actIndex, «isAss ? "consumed" : "inst"»);
«ENDFOREACH-»
«IF endState-»
			default: return parent.createParentFollower(next, actIndex , index«enabledParentFollowers.size > 0 ? (" - " + enabledParentFollowers.size) : ""», «isAss ? "consumed" : "inst"»);
«ELSE-»
			default: return null;
«ENDIF-»			
		}	
	}	
«ENDIF-»
«ENDDEFINE»



«DEFINE element FOR AbstractElement»
«ERROR "unhandled element " + metaType.name + " in " + elementMethodName()» 
«ENDDEFINE»





«REM» ************ Groups ************* «ENDREM»

«DEFINE element FOR Group»
«grammarFragmentToStr("// ")»
protected class «elementMethodName()» extends GroupToken {
	
«EXPAND constructor-»
}
«EXPAND element FOREACH elements.reject(e|e.getTreeConstState().disabled)»
«ENDDEFINE»

«REM» ************ Unordered Groups ************* «ENDREM»

«DEFINE element FOR UnorderedGroup»
«grammarFragmentToStr("// ")»
protected class «elementMethodName()» extends UnorderedGroupToken {
	
«EXPAND constructor-»
}
«EXPAND element FOREACH elements.reject(e|e.getTreeConstState().disabled)»
«ENDDEFINE»


«REM» ************ Alternatives ************* «ENDREM»

«DEFINE element FOR Alternatives»
«grammarFragmentToStr("// ")»
protected class «elementMethodName()» extends AlternativesToken {

«EXPAND constructor-»
}
«EXPAND element FOREACH elements.reject(e|e.getTreeConstState().disabled)»
«ENDDEFINE»



«REM» ************ RuleCall ************* «ENDREM»

«DEFINE element FOR RuleCall»
«grammarFragmentToStr("// ")»
«IF calledParserRule() != null && !calledParserRule().isDatatypeRule()-»
protected class «elementMethodName()» extends RuleCallToken {
	
«EXPAND constructor-»
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(«calledParserRule().alternatives.elementMethodName()».class, current)) return null;
		return current;
	}
	
«EXPAND createParentFollowerMethod(false) FOR getTreeConstState()-»
}
«ELSE-»
protected class «elementMethodName()» extends UnassignedTextToken {

«EXPAND constructor-»
}
«ENDIF-»
«ENDDEFINE»


«REM» ************ Assignment ************* «ENDREM»

«DEFINE assignmentCreate FOR AbstractElement-»
«ERROR "doing nothing for " + metaType»
«ENDDEFINE»

«DEFINE assignmentCreate FOR Keyword-»
«IF containingAssignment().operator == '?='-»
		if(Boolean.TRUE.equals(value)) { // «metaType.name»
			type = AssignmentType.KW;
			element = grammarAccess.«gaRuleElementAccessor()»;
			return obj;
		}
«ELSE-»
		if("«value.replaceAll("\\\\","\\\\\\\\").replaceAll("\\\"","\\\\\\\"")»".equals(value)) { // «metaType.name»
			type = AssignmentType.KW;
			element = grammarAccess.«gaRuleElementAccessor()»;
			return obj;
		}
«ENDIF-»
«ENDDEFINE»

«DEFINE assignmentCreate FOR CrossReference-»
		if(value instanceof EObject) { // «metaType.name»
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.«gaRuleElementAccessor()».getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.«gaRuleElementAccessor()»; 
				return obj;
			}
		}
«ENDDEFINE»

«DEFINE assignmentCreate FOR RuleCall-»
«IF calledParserRule()!=null-»
«IF !isDatatypeRule(calledParserRule())-»
		if(value instanceof EObject) { // «metaType.name»
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.«calledParserRule().gaRuleAccessor()».getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.«gaRuleElementAccessor()»; 
				consumed = obj;
				return param;
			}
		}
«ELSE-»
		if(Boolean.TRUE.booleanValue()) { «REM»metaType.name FIXME: check if value is valid for datatype rule«ENDREM»
			type = AssignmentType.DRC;
			element = grammarAccess.«gaRuleElementAccessor()»;
			return obj;
		}
«ENDIF-»
«ELSEIF calledEnumRule()!=null-»
		if(Boolean.TRUE.booleanValue()) { «REM»metaType.name FIXME: check if value is valid for enum rule«ENDREM» 
			type = AssignmentType.ERC;
			element = grammarAccess.«gaRuleElementAccessor()»;
			return obj;
		}
«ELSE-»
		if(Boolean.TRUE.booleanValue()) { «REM»metaType.name FIXME: check if value is valid for lexer rule«ENDREM»
			type = AssignmentType.LRC;
			element = grammarAccess.«gaRuleElementAccessor()»;
			return obj;
		}
«ENDIF-»
«ENDDEFINE»


«DEFINE element FOR Assignment»
«grammarFragmentToStr("// ")»
protected class «elementMethodName()» extends AssignmentToken  {
	
«EXPAND constructor-»
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("«feature»",«IF isAssignmentRequired()»true«ELSE»false«ENDIF»)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("«feature»");
		«EXPAND assignmentCreate FOREACH getNestedElementsFromAssignment()-»
		return null;
	}

«EXPAND createParentFollowerMethod(true) FOR getTreeConstState()-»
}
«ENDDEFINE»



«REM» ************ Action ************* «ENDREM»

«DEFINE element FOR Action»
«grammarFragmentToStr("// ")»
protected class «elementMethodName()» extends ActionToken  {

«EXPAND constructor-»	
«IF feature == null || feature == ""-»
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isConsumed()) return null;
		return current;
	}
«ELSE-»
    @Override
	protected IInstanceDescription tryConsumeVal() {
		Object val = current.getConsumable("«feature»", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("«feature»")) return null;
		return getDescr((EObject) val);
	}
«ENDIF-»	
}
«ENDDEFINE»



«REM» ************ Keyword ************* «ENDREM»

«DEFINE element FOR Keyword»
«grammarFragmentToStr("// ")»
protected class «elementMethodName()» extends KeywordToken  {
	
«EXPAND constructor-»
}
«ENDDEFINE»


