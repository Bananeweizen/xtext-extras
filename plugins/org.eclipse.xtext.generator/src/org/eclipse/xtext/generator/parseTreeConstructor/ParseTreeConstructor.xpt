«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::generator::parseTreeConstructor::ParseTreeConstructor»
«EXTENSION org::eclipse::xtext::GrammarUtil»
«EXTENSION org::eclipse::xtext::EcoreUtils»
«EXTENSION org::eclipse::xtext::generator::grammarAccess::GrammarAccess»


«DEFINE root FOR Grammar»
«FILE getParseTreeConstructorName().asPath()+".java" SRC_GEN-»
/*
«fileHeader()»
*/
package «getParseTreeConstructorName().toJavaPackage()»;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import «gaFQName()»;

import com.google.inject.Inject;

public class «getParseTreeConstructorName().toSimpleName()» extends AbstractParseTreeConstructor {
		
	@Inject
	private «gaSimpleName()» grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
«FOREACH allParserRules() AS pr-»
«IF !pr.isDatatypeRule()-»
		if(inst.isInstanceOf(grammarAccess.«pr.gaRuleAccessor()».getType().getClassifier()) && (s = new «pr.alternatives.elementMethodName()»(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
«ENDIF-»
«ENDFOREACH-»		
		return null;
	}
	
«EXPAND rule FOREACH allParserRules()-»
}
«ENDFILE»
«ENDDEFINE»

«DEFINE rule FOR ParserRule-»
«IF !isDatatypeRule()»
/************ begin Rule «name» ****************
 *
«grammarFragmentToStr(" * ")»
 *
 **/
«EXPAND element FOR alternatives-»

/************ end Rule «name» ****************/
«ENDIF»
«ENDDEFINE»

«DEFINE constructor FOR AbstractElement-»
	public «elementMethodName()»(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, «IF !cardinality.isMulti()»!«ENDIF»IS_MANY, «IF !cardinality.isRequired()»!«ENDIF»IS_REQUIRED);
	}
	
	@Override
	public «getJavaTypeName().toSimpleName()» getGrammarElement() {
		return grammarAccess.«gaRuleElementAccessor()»;
	}
«ENDDEFINE»

«DEFINE element FOR AbstractElement»
// FIXME: unhandled element «metaType.name» in «elementMethodName()»
«ERROR "unhandled element " + metaType.name + " in " + elementMethodName()» 
«ENDDEFINE»





«REM» ************ Groups ************* «ENDREM»

«DEFINE element FOR Group»
«grammarFragmentToStr("// ")»
protected class «elementMethodName()» extends GroupToken {
	
«EXPAND constructor-»

	@Override
	protected Solution createSolution() {	
		Solution s1 = new «tokens.last().elementMethodName()»(current, this).firstSolution();
«EXPAND groupItem(1,"		") FOR tokens.withoutLast().reverse().toList()-»
		return null;
	}
}
«EXPAND element FOREACH tokens»
«ENDDEFINE»

«DEFINE groupItem(int i, String s) FOR List[AbstractElement]-»
«s»while(s«i» != null) {
«s»	Solution s«i+1» = new «first().elementMethodName()»(s«i».getCurrent(), s«i».getPredecessor()).firstSolution();
«IF size == 1-»
«s»	if(s«i+1» != null) {
«s»		last = s«i+1».getPredecessor();
«s»		return s«i+1»;
«s»	} else {
«s»		s«i» = s«i».getPredecessor().nextSolution(this,s«i»);
«s»	}
«ELSE-»
«EXPAND groupItem(i+1,s+"	") FOR this.withoutFirst()-»
«s»	s«i» = s«i».getPredecessor().nextSolution(this,s«i»);
«ENDIF-»
«s»}
«ENDDEFINE»



«REM» ************ Alternatives ************* «ENDREM»

«DEFINE element FOR Alternatives»
«grammarFragmentToStr("// ")»
protected class «elementMethodName()» extends AlternativesToken {

«EXPAND constructor-»

	protected AbstractToken createChild(int id) {
		switch(id) {
«FOREACH groups AS g ITERATOR i-»
			case «i.counter0»: return new «g.elementMethodName()»(current, this);
«ENDFOREACH-»
			default: return null;
		}
	}
}
«EXPAND element FOREACH groups»
«ENDDEFINE»



«REM» ************ RuleCall ************* «ENDREM»

«DEFINE element FOR RuleCall»
«grammarFragmentToStr("// ")»
protected class «elementMethodName()» extends RuleCallToken {
	
«EXPAND constructor-»
	
	@Override
	protected Solution createSolution() {
«IF calledParserRule() != null-»
		if(checkForRecursion(«calledParserRule().alternatives.elementMethodName()».class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.«calledParserRule().gaRuleAccessor()».getType().getClassifier())) return null;
		return new «calledParserRule().alternatives.elementMethodName()»(current, this).firstSolution();
«ELSE-»
		// FIXME: lexer rule call
		return null;
«ENDIF-»
	}
}
«ENDDEFINE»


«REM» ************ Assignment ************* «ENDREM»

«DEFINE assignmentCreate FOR AbstractElement-»
		// FIXME: doing nothing for «metaType»
«ENDDEFINE»

«DEFINE assignmentCreate FOR Keyword-»
«IF containingAssignment().operator == '?='»
		if(Boolean.TRUE.equals(value)) { // «metaType.name»
			type = AssignmentType.KW;
			element = grammarAccess.«gaRuleElementAccessor()»;
			return new Solution(obj);
		}
«ELSE»
		if("«value.replaceAll("\\\\","\\\\\\\\").replaceAll("\\\"","\\\\\\\"")»".equals(value)) { // «metaType.name»
			type = AssignmentType.KW;
			element = grammarAccess.«gaRuleElementAccessor()»;
			return new Solution(obj);
		}
«ENDIF»
«ENDDEFINE»

«DEFINE assignmentCreate FOR CrossReference-»
		if(value instanceof EObject) { // «metaType.name»
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.«gaRuleElementAccessor()».getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.«gaRuleElementAccessor()»; 
				return new Solution(obj);
			}
		}
«ENDDEFINE»

«DEFINE assignmentCreate FOR RuleCall-»
«IF calledParserRule()!=null-»
«IF !isDatatypeRule(calledParserRule())»
		if(value instanceof EObject) { // «metaType.name»
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.«calledParserRule().gaRuleAccessor()».getType().getClassifier())) {
				Solution s = new «calledParserRule().alternatives.elementMethodName()»(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}
«ELSE»
		if(Boolean.TRUE.booleanValue()) { // «metaType.name» FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.«gaRuleElementAccessor()»;
			return new Solution(obj);
		}
«ENDIF»
«ELSEIF calledEnumRule()!=null-»
		if(Boolean.TRUE.booleanValue()) { // «metaType.name» FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.«gaRuleElementAccessor()»;
			return new Solution(obj);
		}
«ELSE-»
		if(Boolean.TRUE.booleanValue()) { // «metaType.name» FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.«gaRuleElementAccessor()»;
			return new Solution(obj);
		}
«ENDIF-»
«ENDDEFINE»


«DEFINE element FOR Assignment»
«grammarFragmentToStr("// ")»
protected class «elementMethodName()» extends AssignmentToken  {
	
«EXPAND constructor-»
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("«feature»",«IF !isAssignmentRequired()»!«ENDIF»IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("«feature»");
		«EXPAND assignmentCreate FOREACH getNestedElementsFromAssignment()-»
		return null;
	}
}
«ENDDEFINE»



«REM» ************ Action ************* «ENDREM»

«DEFINE element FOR Action»
«grammarFragmentToStr("// ")»
protected class «elementMethodName()» extends ActionToken  {

«EXPAND constructor-»
	
«IF feature == null || feature == ""-»
	@Override
	protected Solution createSolution() {
		if(!current.isInstanceOf(grammarAccess.«gaRuleElementAccessor()».getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return new Solution(current);
	}
«ELSE-»
	@Override
	protected Solution createSolution() {
		if(!current.isInstanceOf(grammarAccess.«gaRuleElementAccessor()».getType().getClassifier())) return null;
		Object val = current.getConsumable("«feature»", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("«feature»")) return null;
		return new Solution(getDescr((EObject)val));
	}
«ENDIF-»	
}
«ENDDEFINE»



«REM» ************ Keyword ************* «ENDREM»

«DEFINE element FOR Keyword»
«grammarFragmentToStr("// ")»
protected class «elementMethodName()» extends KeywordToken  {
	
	public «elementMethodName()»(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, «IF !cardinality.isRequired()»!«ENDIF»IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.«gaRuleElementAccessor()»;
	}	
}
«ENDDEFINE»


«REM» ************ CrossReference ************* «ENDREM»

«DEFINE element FOR CrossReference»
«grammarFragmentToStr("// ")»
protected class «elementMethodName()» extends AbstractToken  {

«EXPAND constructor-»
	
	@Override
	protected Solution createSolution() {
		// FIXME: This class has been generated because there is an unassigned 
		// CrossReference in your grammar. This means your grammar is invalid, 
		// since CrossReferences are only allowed inside Assignments.
		return null;
	}
}
«ENDDEFINE»

