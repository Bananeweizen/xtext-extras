«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext»
«IMPORT org::eclipse::xtext::generator::parser::antlr::ex::common»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::generator::parser::antlr::AntlrGrammar»
«EXTENSION org::eclipse::xtext::generator::grammarAccess::GrammarAccess»

«DEFINE parser(AntlrFragmentHelper helper) FOR Grammar»
«FILE helper.getParserClassName(this).asPath()+".java" SRC_GEN-»
/*
«fileHeader()»
*/
package «helper.getParserClassName(this).toJavaPackage()»;

import com.google.inject.Inject;

import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import «gaFQName()»;

public class «helper.getParserClassName(this).toSimpleName()» extends org.eclipse.xtext.parser.antlr.AbstractAntlrParser {
	
	@Inject
	private «gaSimpleName()» grammarAccess;
	
	@Override
	protected void setInitialHiddenTokens(XtextTokenStream tokenStream) {
		tokenStream.setInitialHiddenTokens(«FOREACH initialHiddenTokens() AS hidden SEPARATOR ", "»"«hidden»"«ENDFOREACH-»);
	}
	
	@Override
	protected «helper.getInternalParserClassName(this)» createParser(XtextTokenStream stream) {
		return new «helper.getInternalParserClassName(this)»(stream, getGrammarAccess());
	}
	
	@Override 
	protected String getDefaultRuleName() {
		return "«allParserRules().first().name»";
	}
	
	public «gaSimpleName()» getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(«gaSimpleName()» grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
}
«ENDFILE»
«ENDDEFINE»
