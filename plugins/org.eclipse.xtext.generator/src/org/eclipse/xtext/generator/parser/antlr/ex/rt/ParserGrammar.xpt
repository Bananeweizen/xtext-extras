«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext»
«IMPORT org::eclipse::emf::ecore»
«IMPORT org::eclipse::xtext::generator::parser::antlr»
«IMPORT org::eclipse::xtext::generator::parser::antlr::ex::common»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::generator::parser::antlr::AntlrGrammar»
«EXTENSION org::eclipse::xtext::generator::parser::antlr::ex::common::Common»
«EXTENSION org::eclipse::xtext::EcoreUtils»

«DEFINE grammar(AntlrOptions options, AntlrFragmentHelper helper) FOR Grammar»
«FILE helper.getParserGrammarFileName(this).asPath()+".g" SRC_GEN-»
/*
«fileHeader()»
*/
parser grammar «helper.getParserGrammarFileName(this).toSimpleName()»;

options {
	tokenVocab=«helper.getLexerGrammarFileName(this).toSimpleName()»;
	superClass=AbstractInternalAntlrParser;
	«IF options.backtrack-»
	backtrack=true;
	«ENDIF-»
	«IF options.memoize-»
	 memoize=true;
	«ENDIF-»
	«IF options.k>=0»
	 k=«options.k»;
	«ENDIF»
}

@header {
package «helper.getParserGrammarFileName(this).toJavaPackage()»; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
«IF !allEnumRules().isEmpty-»
import org.eclipse.emf.common.util.Enumerator;
«ENDIF-»
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
«IF !allParserRules().allContents().typeSelect(UnorderedGroup).isEmpty && options.backtrack-»
import org.eclipse.xtext.parser.antlr.IUnorderedGroupHelper.UnorderedGroupState;
«ENDIF-»
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import «gaFQName()»;

}

@members {

«IF options.backtrack-»
/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
«ENDIF»
 	private «gaSimpleName()» grammarAccess;
 	
    public «helper.getInternalParserClassName(this).toSimpleName()»(TokenStream input, IAstFactory factory, «gaSimpleName()» grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "«allParserRules().first().name»";	
   	} 
   	   	
   	@Override
   	protected «gaSimpleName()» getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}
«EXPAND antlrRules(options)»
«ENDFILE»
«ENDDEFINE»

«DEFINE antlrRules(AntlrOptions options) FOR Grammar»
«EXPAND rule(this, options) FOREACH allParserRules()»
«EXPAND rule(this, options) FOREACH allEnumRules()»
«ENDDEFINE»


«DEFINE rule(Grammar original, AntlrOptions options) FOR ParserRule»
«IF isCalled(original,this)»
«IF !isDatatypeRule()»
// Entry rule «entryRuleName()»
«entryRuleName()» returns [EObject current=null]
«IF definesHiddenTokens || (options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty)-»
	@init { 
«IF definesHiddenTokens-»
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens(«FOREACH hiddenTokens AS hidden SEPARATOR ", "»"«hidden.ruleName()»"«ENDFOREACH-»);
«ENDIF-» 
«IF options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty-»
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
«FOREACH allContents().typeSelect(UnorderedGroup) AS group ITERATOR it-»
			grammarAccess.«group.gaRuleElementAccessor()»«IF !it.lastIteration», «ENDIF»
«ENDFOREACH-» 
		);
«ENDIF-»
	}
«ENDIF-»
	:
	{ currentNode = «EXPAND createCompositeNode» }
	 iv_«ruleName()»=«ruleName()» 
	 { $current=$iv_«ruleName()».current; } 
	 EOF 
;
«IF definesHiddenTokens || (options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty)-»
finally {
«IF definesHiddenTokens-»
	myHiddenTokenState.restore();
«ENDIF-»
«IF options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty-»
	myUnorderedGroupState.restore();
«ENDIF-»
}
«ENDIF-»

// Rule «name»
«ruleName()» returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
«IF definesHiddenTokens-»
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens(«FOREACH hiddenTokens AS hidden SEPARATOR ", "»"«hidden.ruleName()»"«ENDFOREACH-»);
«ENDIF-»
«IF options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty-»
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
«FOREACH allContents().typeSelect(UnorderedGroup) AS group ITERATOR it-»
			grammarAccess.«group.gaRuleElementAccessor()»«IF !it.lastIteration», «ENDIF»
«ENDFOREACH-» 
		);
«ENDIF-»
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
    «EXPAND ebnf(original, options) FOR this.alternatives»
;
«IF definesHiddenTokens || (options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty)-»
finally {
«IF definesHiddenTokens-»
	myHiddenTokenState.restore();
«ENDIF-»
«IF options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty-»
	myUnorderedGroupState.restore();
«ENDIF-»
}
«ENDIF-»
«ELSE»
// Entry rule «entryRuleName()»
«entryRuleName()» returns [String current=null] 
«IF definesHiddenTokens || (options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty)-»
	@init { 
«IF definesHiddenTokens-»
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens(«FOREACH hiddenTokens AS hidden SEPARATOR ", "»"«hidden.ruleName()»"«ENDFOREACH-»);
«ENDIF-» 
«IF options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty-»
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
«FOREACH allContents().typeSelect(UnorderedGroup) AS group ITERATOR it-»
			grammarAccess.«group.gaRuleElementAccessor()»«IF !it.lastIteration», «ENDIF-»
«ENDFOREACH-» 
		);
«ENDIF-»
	}
«ENDIF-»
:
	{ currentNode = «EXPAND createCompositeNode» } 
	 iv_«ruleName()»=«ruleName()» 
	 { $current=$iv_«ruleName()».current.getText(); }  
	 EOF 
;
«IF definesHiddenTokens || (options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty)-»
finally {
«IF definesHiddenTokens-»
	myHiddenTokenState.restore();
«ENDIF-»
«IF options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty-»
	myUnorderedGroupState.restore();
«ENDIF-»
}
«ENDIF-»

// Rule «name»
«ruleName()» returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
«IF definesHiddenTokens-»
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens(«FOREACH hiddenTokens AS hidden SEPARATOR ", "»"«hidden.ruleName()»"«ENDFOREACH-»);
«ENDIF-»
«IF options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty-»
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
«FOREACH allContents().typeSelect(UnorderedGroup) AS group ITERATOR it-»
			grammarAccess.«group.gaRuleElementAccessor()»«IF !it.lastIteration», «ENDIF»
«ENDFOREACH-» 
		);
«ENDIF-»
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
   «EXPAND dataTypeEbnf(original) FOR this.alternatives»
    ;
«IF definesHiddenTokens || (options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty)-»
finally {
«IF definesHiddenTokens-»
	myHiddenTokenState.restore();
«ENDIF-»
«IF options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty-»
	myUnorderedGroupState.restore();
«ENDIF-»
}
«ENDIF-» 
«ENDIF»
«ENDIF»
«ENDDEFINE»

«DEFINE rule(Grammar original, AntlrOptions options) FOR EnumRule»
«IF isCalled(original,this)»
// Rule «name»
«ruleName()» returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
    «EXPAND ebnf(original, options) FOR this.alternatives»;
«ENDIF»
«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options) FOR EnumLiteralDeclaration-»
    «localVar()»=«grammar.getKeywordRuleName(literal.value)»
	{
        $current = grammarAccess.«grammarElementAccess(this)».getEnumLiteral().getInstance();
        «EXPAND createLeafNode(localVar())» 
    }
«ENDDEFINE»

«DEFINE ebnf(Grammar grammar, AntlrOptions options) FOR AbstractElement-»
«IF mustBeParenthesized()»(«EXPAND ebnf2(grammar, options)»)«ELSE»«EXPAND ebnf2(grammar, options)»«ENDIF»«cardinality-»
«ENDDEFINE»

«DEFINE dataTypeEbnf(Grammar grammar) FOR AbstractElement-»
«IF mustBeParenthesized()»(«EXPAND dataTypeEbnf2(grammar)»)«ELSE»«EXPAND dataTypeEbnf2(grammar)»«ENDIF»«cardinality-»
«ENDDEFINE»

«DEFINE dataTypeEbnf2(Grammar grammar) FOR AbstractElement»ERROR «metaType.name» not matched«ENDDEFINE»

«DEFINE dataTypeEbnf2(Grammar grammar) FOR Alternatives-»«EXPAND dataTypeEbnf(grammar) FOREACH elements SEPARATOR '\n    |'»«ENDDEFINE»

«DEFINE dataTypeEbnf2(Grammar grammar) FOR Group»«EXPAND dataTypeEbnf(grammar) FOREACH elements»«ENDDEFINE»

«DEFINE dataTypeEbnf2(Grammar grammar) FOR UnorderedGroup»
«LET elements.reject(e|e.isOptionalCardinality()).size AS mandatoryContent»
(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.«gaRuleElementAccessor()»);
	}
	(
		(
«FOREACH elements AS element ITERATOR it»
			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.«gaRuleElementAccessor()», «it.counter0»)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.«gaRuleElementAccessor()», «it.counter0»);
	 				}
«REM»Predicate {true}=> helps to workaround an issue in the Antlr grammar processing«ENDREM»«IF true»«ENDIF-»
					({true}?=>(«EXPAND dataTypeEbnf2(grammar) FOR element»))«IF element.isMultipleCardinality()»+«ENDIF»
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.«gaRuleElementAccessor()»);
	 				}
 				)
			)  «IF !it.lastIteration»|«ENDIF»
«ENDFOREACH»
		)«IF mandatoryContent != 0-»+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.«gaRuleElementAccessor()»)}?«ELSE»*«ENDIF»	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.«gaRuleElementAccessor()»);
	}
«ENDLET»
«ENDDEFINE»

«DEFINE dataTypeEbnf2(Grammar grammar) FOR Keyword»
	kw=«grammar.getKeywordRuleName(value)» 
    {
        $current.merge(kw);
        «EXPAND createLeafNode("kw")» 
    }
«ENDDEFINE»

«DEFINE dataTypeEbnf2(Grammar grammar) FOR RuleCall-»
«IF (ParserRule.isInstance(rule) || EnumRule.isInstance(rule)) && !isAssigned()»
    { 
        currentNode=«EXPAND createCompositeNode» 
    }
«ENDIF-»
    «localVar()»=«rule.ruleName()-»
    {
		$current.merge(«localVar()»);
    }
«IF (ParserRule.isInstance(rule) || EnumRule.isInstance(rule)) && !isAssigned()»
    { 
        currentNode = currentNode.getParent();
    }
«ENDIF-»
«IF TerminalRule.isInstance(rule)»
    { 
    «EXPAND createLeafNode(localVar())» 
    }
«ENDIF-»
«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options) FOR AbstractElement»ERROR «metaType.name» not matched«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options) FOR Alternatives-»«EXPAND ebnf(grammar, options) FOREACH elements SEPARATOR '\n    |'»«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options) FOR Group»«EXPAND ebnf(grammar, options) FOREACH elements»«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options) FOR UnorderedGroup»
«LET elements.reject(e|e.isOptionalCardinality()).size AS mandatoryContent»
(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.«gaRuleElementAccessor()»);
	}
	(
		(
«FOREACH elements AS element ITERATOR it»
			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.«gaRuleElementAccessor()», «it.counter0»)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.«gaRuleElementAccessor()», «it.counter0»);
	 				}
«REM»Predicate {true}=> helps to workaround an issue in the Antlr grammar processing«ENDREM»«IF true»«ENDIF-»
					({true}?=>(«EXPAND ebnf2(grammar, options) FOR element»))«IF element.isMultipleCardinality()»+«ENDIF»
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.«gaRuleElementAccessor()»);
	 				}
 				)
			)  «IF !it.lastIteration»|«ENDIF»
«ENDFOREACH»
		)«IF mandatoryContent != 0-»+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.«gaRuleElementAccessor()»)}?«ELSE»*«ENDIF»	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.«gaRuleElementAccessor()»);
	}
«ENDLET»
«ENDDEFINE»

«DEFINE crossrefEbnf(Grammar grammar, CrossReference ref) FOR AbstractElement-»
«ERROR "crossrefEbnf is not supported for AbstractElement"»
«ENDDEFINE»

«DEFINE crossrefEbnf(Grammar grammar, CrossReference ref) FOR Alternatives-»
		(«EXPAND crossrefEbnf(grammar, ref) FOREACH elements SEPARATOR '\n    |'»)
«ENDDEFINE»

«DEFINE crossrefEbnf(Grammar grammar, CrossReference ref) FOR RuleCall-»
«EXPAND crossrefEbnf(grammar, ref) FOR rule-»
«ENDDEFINE»

«DEFINE crossrefEbnf(Grammar grammar, CrossReference ref) FOR AbstractRule-»
«ERROR "crossrefEbnf is not supported for AbstractRule"»
«ENDDEFINE»

«DEFINE crossrefEbnf(Grammar grammar, CrossReference ref) FOR ParserRule-»
«IF !isDatatypeRule()-»
«ERROR "crossrefEbnf is not supported for ParserRule that is not a datatype rule"»
«ELSE-»
		{ 
	        currentNode=«EXPAND createCompositeNode FOR ref» 
	    }
		«ruleName()-»
		{ 
	        currentNode = currentNode.getParent();
	    }
«ENDIF-»
«ENDDEFINE»

«DEFINE crossrefEbnf(Grammar grammar, CrossReference ref) FOR EnumRule-»
		{ 
	        currentNode=«EXPAND createCompositeNode FOR ref» 
	    }
		«ruleName()-»
		{ 
	        currentNode = currentNode.getParent();
	    }
«ENDDEFINE»

«DEFINE crossrefEbnf(Grammar grammar, CrossReference ref) FOR TerminalRule-»
	«ref.containingAssignment().localVar()»=«ruleName()»
	{
		«EXPAND createLeafNode(ref.containingAssignment().localVar()) FOR ref» 
	}
«ENDDEFINE»

«DEFINE assignmentEbnf(Grammar grammar, Assignment assignment, AntlrOptions options) FOR AbstractElement-»
		«assignment.localVar(this)»=«EXPAND ebnf(grammar, options)» 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.«assignment.containingParserRule().grammarElementAccess()».getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        «REM»the use of input.LT(-1) in the following line is a workaround for a bug of antlr, where assignments of alternative keywords are ignored when there are actions«ENDREM»
	        try {
	       		«assignment.setOrAdd()»($current, "«assignment.feature»", «
	        		IF assignment.isBoolean()»true«
	        		ELSE»«assignment.localVar(this)»«
	        		ENDIF», «assignment.terminal.toStringLiteral()», lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
«ENDDEFINE»

«DEFINE assignmentEbnf(Grammar grammar, Assignment assignment, AntlrOptions options) FOR Group-»
«ERROR "assignmentEbnf is not supported for Group"»
«ENDDEFINE»

«DEFINE assignmentEbnf(Grammar grammar, Assignment assignment, AntlrOptions options) FOR Assignment-»
«ERROR "assignmentEbnf is not supported for Assignment"»
«ENDDEFINE»

«DEFINE assignmentEbnf(Grammar grammar, Assignment assignment, AntlrOptions options) FOR Action-»
«ERROR "assignmentEbnf is not supported for Action"»
«ENDDEFINE»

«DEFINE assignmentEbnf(Grammar grammar, Assignment assignment, AntlrOptions options) FOR Alternatives-»
(
«EXPAND assignmentEbnf(grammar, assignment, options) FOREACH elements SEPARATOR '\n    |'»
)
«ENDDEFINE»

«DEFINE assignmentEbnf(Grammar grammar, Assignment assignment, AntlrOptions options) FOR RuleCall-»
«EXPAND assignmentEbnf(assignment, this) FOR rule-»
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, RuleCall call) FOR AbstractRule-»
«ERROR "assignmentEbnf is not supported for AbstractRule"»
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, RuleCall call) FOR ParserRule-»
		{ 
	        currentNode=«EXPAND createCompositeNode FOR call» 
	    }
		«assignment.localVar(call)»=«ruleName()-»
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.«assignment.containingParserRule().grammarElementAccess()».getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		«assignment.setOrAdd()»(
	       			$current, 
	       			"«assignment.feature»",
	        		«IF assignment.isBoolean()»true«ELSE»«assignment.localVar(call)»«ENDIF», 
	        		«call.toStringLiteral()», 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, RuleCall call) FOR EnumRule-»
		{ 
	        currentNode=«EXPAND createCompositeNode FOR call» 
	    }
		«assignment.localVar(call)»=«ruleName()-»
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.«assignment.containingParserRule().grammarElementAccess()».getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		«assignment.setOrAdd()»(
	       			$current, 
	       			"«assignment.feature»",
	        		«IF assignment.isBoolean()»true«ELSE»«assignment.localVar(call)»«ENDIF», 
	        		«call.toStringLiteral()», 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, RuleCall call) FOR TerminalRule-»
		«assignment.localVar(call)»=«ruleName()»
		{
			«EXPAND createLeafNode(assignment.localVar(call)) FOR call» 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.«assignment.containingParserRule().grammarElementAccess()».getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		«assignment.setOrAdd()»(
	       			$current, 
	       			"«assignment.feature»",
	        		«IF assignment.isBoolean()»true«ELSE»«assignment.localVar(call)»«ENDIF», 
	        		«call.toStringLiteral()», 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
«ENDDEFINE»

«DEFINE assignmentEbnf(Grammar grammar, Assignment assignment, AntlrOptions options) FOR CrossReference-»
«IF options.backtrack-»
		{ 
		  /* */ 
		}
«ENDIF-»
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.«assignment.containingParserRule().grammarElementAccess()».getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		«EXPAND crossrefEbnf(grammar, this) FOR terminal-»
«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options) FOR Assignment»
(
«EXPAND assignmentEbnf(grammar, this, options) FOR terminal»
)
«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options) FOR CrossReference»
«ERROR "ebnf2(Grammar grammar) is not supported for CrossReference"»
«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options) FOR Action»
«IF options.backtrack-»
	{ 
	  /* */ 
	}
«ENDIF-»
    { 
        temp=factory.create(grammarAccess.«grammarElementAccess()».getType().getClassifier());
«IF feature != null-»
        try {
        	factory.«setOrAdd()»(temp, "«feature»", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
«ENDIF-»
        $current = temp; 
        temp = null;
        «EXPAND insertCompositeNode» 
        associateNodeWithAstElement(currentNode, $current); 
    }
«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options) FOR Keyword»
	«IF !isAssigned()»«localVar()»=«ENDIF»«grammar.getKeywordRuleName(value)» 
    {
    	«IF !isAssigned()-»
    	«EXPAND createLeafNode(localVar())»
    	«ELSE-»
        «EXPAND createLeafNode(containingAssignment().localVar(this))»
        «ENDIF-»  
    }
«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options) FOR RuleCall-»
«IF (ParserRule.isInstance(rule) || EnumRule.isInstance(rule)) && !isAssigned()»
«IF options.backtrack-»
	{ 
	  /* */ 
	}
«ENDIF-»
    { 
        currentNode=«EXPAND createCompositeNode» 
    }
«IF (ParserRule.isInstance(rule) && !isDatatypeRule((ParserRule)rule) && !EnumRule.isInstance(rule))-»
    «localVar()»=«ENDIF-»«ENDIF-»«IF TerminalRule.isInstance(rule)-»«localVar()»=«ENDIF-»
«rule.ruleName()-»
«IF (ParserRule.isInstance(rule) || EnumRule.isInstance(rule)) && !isAssigned()»
    {
«IF (ParserRule.isInstance(rule) && !isDatatypeRule((ParserRule)rule) && !EnumRule.isInstance(rule))-»
        $current = $«localVar()».current;
«ENDIF-» 
        currentNode = currentNode.getParent();
    }
«ENDIF-»
«IF TerminalRule.isInstance(rule)»
    { 
    «EXPAND createLeafNode(localVar())» 
    }
«ENDIF-»
«ENDDEFINE»

«DEFINE createCompositeNode FOR EObject
    »createCompositeNode(grammarAccess.«
    grammarElementAccess(this)
    », currentNode);«
ENDDEFINE»

«DEFINE insertCompositeNode FOR Action
    »CompositeNode newNode = createCompositeNode(grammarAccess.«
    grammarElementAccess(this)
    », currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode;«
ENDDEFINE»

«DEFINE createLeafNode(String token) FOR EObject
    »createLeafNode(«token», grammarAccess.«
    grammarElementAccess(this)
    », «
    IF isAssigned()
        »"«
        containingAssignment().feature
        »"«
    ELSE
        »null«
    ENDIF
    »);«
ENDDEFINE»

