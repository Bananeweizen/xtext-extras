«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::GrammarUtil»
«EXTENSION org::eclipse::xtext::generator::validation::CheckFragment»

«DEFINE generate(List[String] packageQNames) FOR Grammar»

«FILE validationPackage().asPath() + "/" + getName() + "FastChecks.chk" SRC-»
/*
 * This check file is used to specify inexpensive constraints for the
 * derived metamodels. They will be executed by the editor when the
 * user opens a file and whenever the user changes its content.
 * At generation time they will be executed as well.
 *  
 * Example:
 *
 * import myDsl;
 *
 * context Class WARNING "Name should start with a capital" :
 *    name.toFirstUpper() == name;
 */
«ENDFILE»

«FILE validationPackage().asPath() + "/" + getName() + "Checks.chk" SRC-»
/*
 * This check file is used to specify constraints for the derived metamodels.
 * They will be executed by the editor when the user saves a file.
 * At generation time they will be executed as well.
 *
 * Example:
 *
 * import myDsl;
 *
 * context Class WARNING "Name should start with a capital" :
 *    name.toFirstUpper() == name;
 */
«ENDFILE»

«FILE validationPackage().asPath() + "/" + getName() + "ExpensiveChecks.chk" SRC-»
/*
 * This check file is used to specify expensive constraints for the derived
 * metamodels. They will only be executed when triggered explicitly or
 * at generation time.
 *
 * import myDsl;
 *
 * extension org::xtext::example::MyExtensions; 
 *
 * context Model ERROR "Inconsistent Model" :
 *    invariantThatIsComplexToCheck();
 */
«ENDFILE»

«FILE getCheckValidatorName().asPath()+".java" SRC_GEN»
package «getCheckValidatorName().toJavaPackage()»;

import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.validation.CheckType;

public class «getCheckValidatorName().toSimpleName()» extends org.eclipse.xtext.check.AbstractCheckValidator {

	public «getCheckValidatorName().toSimpleName()»() {
		configure();
	}
	
	protected void configure() {
		addCheckFile("«(validationPackage().asPath() + "/" + getName() +"FastChecks").replaceAll("/","::")»", CheckType.FAST);
		addCheckFile("«(validationPackage().asPath() + "/" + getName() +"Checks").replaceAll("/","::")»", CheckType.NORMAL);
		addCheckFile("«(validationPackage().asPath() + "/" + getName() +"ExpensiveChecks").replaceAll("/","::")»", CheckType.EXPENSIVE);
	}
	
	@Override
	protected List<? extends EPackage> getEPackages() {
	    List<EPackage> result = new ArrayList<EPackage>();
	    «FOREACH packageQNames AS e-»
	    result.add(«e».eINSTANCE);
	    «ENDFOREACH-»
		return result;
	}
	
}
«ENDFILE»

«ENDDEFINE»

«DEFINE addToPluginXmlRt(List[String] packageQNames) FOR Grammar-»«ENDDEFINE»


«DEFINE addToPluginXmlUi(List[String] packageQNames) FOR Grammar-»«ENDDEFINE»

«DEFINE addToStandaloneSetup(List[String] packageQNames) FOR Grammar-»
	//TODO registration of EValidators should be added here, too
«ENDDEFINE»


