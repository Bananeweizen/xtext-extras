«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::GrammarUtil»
«EXTENSION org::eclipse::xtext::generator::validation::JavaValidatorFragment»


«DEFINE generate(List[String] packageQNames, boolean isRegisterForImportedPackages, List[String] composedChecks) FOR Grammar»
«FILE getValidatorName("Abstract").asPath()+".java" SRC_GEN-»
package «getValidatorName("Abstract").toJavaPackage()»;
 
import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.validation.AbstractDeclarativeValidator;
«IF !composedChecks.isEmpty-»
import org.eclipse.xtext.validation.ComposedChecks;
«ENDIF-»

«IF !composedChecks.isEmpty-»
@ComposedChecks(validators= {«FOREACH composedChecks AS validator SEPARATOR ", "-»«validator».class«ENDFOREACH-»})
«ENDIF-»
public class «getValidatorName("Abstract").toSimpleName()» extends AbstractDeclarativeValidator {

   	«EXPAND Common::getEPackages(packageQNames, isRegisterForImportedPackages)-»

}
«ENDFILE»

«FILE getValidatorName("").asPath()+".java" SRC-»
package «getValidatorName("").toJavaPackage()»;
 

public class «getValidatorName("").toSimpleName()» extends «getValidatorName("Abstract").toSimpleName()» {

//	@Check
//	public void checkTypeNameStartsWithCapital(Type type) {
//		if (!Character.isUpperCase(type.getName().charAt(0))) {
//			warning("Name should start with a capital", MyDslPackage.TYPE__NAME);
//		}
//	}

}
«ENDFILE»
«ENDDEFINE»


«DEFINE addToPluginXmlRt(List[String] packageQNames, boolean isRegisterForImportedPackages, List[String] composedChecks) FOR Grammar»
«ENDDEFINE»


«DEFINE addToPluginXmlUi(List[String] packageQNames, boolean isRegisterForImportedPackages, List[String] composedChecks) FOR Grammar»
«ENDDEFINE»


«DEFINE addToStandaloneSetup(List[String] packageQNames, boolean isRegisterForImportedPackages, List[String] composedChecks) FOR Grammar»
«ENDDEFINE»

