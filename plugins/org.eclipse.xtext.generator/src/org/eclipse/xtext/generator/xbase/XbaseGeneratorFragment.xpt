«REM»
/*******************************************************************************
 * Copyright (c) 2011 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::GrammarUtil»
«EXTENSION org::eclipse::xtext::generator::xbase::XbaseGeneratorFragment»

«DEFINE generate(Boolean useInferredJvmModel, Boolean generateXtendInferrer) FOR Grammar»
«IF generateXtendInferrer»
«FILE getJvmModelInferrerName().asPath()+".xtend" SRC-»
package «getJvmModelInferrerName().toJavaPackage()»
 
import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.util.IAcceptor
import org.eclipse.xtext.xbase.jvmmodel.IJvmModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder

/**
 * <p>Infers a JVM model from the source model.</p> 
 *
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. 
 * Other Xtend models link against the JVM model rather than the source model. The JVM
 * model elements should be associated with their source element by means of the
 * {@link IJvmModelAssociator}.</p>     
 */
class «getJvmModelInferrerName().toSimpleName()» implements IJvmModelInferrer {

	@Inject extension JvmTypesBuilder

   	override void infer(EObject e, IAcceptor<JvmDeclaredType> acceptor) {
   	}
}
«ENDFILE»
«ENDIF»

«IF useInferredJvmModel»
«FILE getJvmRenameStrategyName().asPath() +".java" SRC_UI»
/*
«fileHeader()»
*/
package «getJvmRenameStrategyName().toJavaPackage()»;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.xbase.ui.jvmmodel.refactoring.AbstractJvmModelRenameStrategy;

/**
 * Encapsulates the model changes of a rename refactoring.  
 */
@SuppressWarnings("restriction")
public class «getJvmRenameStrategyName().toSimpleName()» extends AbstractJvmModelRenameStrategy {

	@Override
	protected void setInferredJvmElementName(String name, EObject renamedSourceElement) {
		/*
		 * TODO: rename inferred elements as you would in IJvmModelInferrer 
		 */
	}
}
«ENDFILE»
«ENDIF»
«ENDDEFINE»

«DEFINE addToPluginXmlRt(Boolean useInferredJvmModel, Boolean generateXtendInferrer) FOR Grammar»
«ENDDEFINE» 


«DEFINE addToPluginXmlUi(Boolean useInferredJvmModel, Boolean generateXtendInferrer) FOR Grammar»
«ENDDEFINE»


«DEFINE addToStandaloneSetup(Boolean useInferredJvmModel, Boolean generateXtendInferrer) FOR Grammar»
«ENDDEFINE»

