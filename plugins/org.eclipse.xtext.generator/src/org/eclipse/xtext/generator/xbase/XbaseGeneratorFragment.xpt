«REM»
/*******************************************************************************
 * Copyright (c) 2011 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::GrammarUtil»
«EXTENSION org::eclipse::xtext::generator::xbase::XbaseGeneratorFragment»

«DEFINE generate(Boolean generateInferrer) FOR Grammar»
«IF generateInferrer»
«FILE getJvmModelInferrerName().asPath()+".xtend" SRC-»
package «getJvmModelInferrerName().toJavaPackage()»
 
import org.eclipse.xtext.xbase.jvmmodel.*
import org.eclipse.xtext.common.types.*
import org.eclipse.emf.ecore.EObject
import java.util.List

/**
 * <p>Infers a JVM model from the source model.</p> 
 *
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. 
 * Other Xtend models link against the JVM model rather than the source model. The JVM
 * model elements should be associated with their source element by means of the
 * {@link IJvmModelAssociator}.</p>     
 */
class «getJvmModelInferrerName().toSimpleName()» implements IJvmModelInferrer {

	@Inject IJvmModelAssociator 

   	override List<? extends JvmDeclaredType> inferJvmModel(EObject sourceObject) {
   		return newArrayList();
   	}
}
«ENDFILE»

«FILE getRefactoringStrategyName().asPath() +".java" SRC_UI»
/*
«fileHeader()»
*/
package «getRefactoringStrategyName().toJavaPackage()»;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.resource.ILocationInFileProvider;
import org.eclipse.xtext.ui.refactoring.IRenameStrategy;
import org.eclipse.xtext.ui.refactoring.impl.DefaultRenameStrategy;
import org.eclipse.xtext.ui.refactoring.ui.IRenameElementContext;
import org.eclipse.xtext.xbase.jvmmodel.IJvmModelAssociations;
import org.eclipse.xtext.xbase.ui.jvmmodel.refactoring.AbstractJvmModelRenameStrategy;

import com.google.inject.Inject;

/**
 * Encapsulates the model changes of a rename refactoring.  
 */
public class «getRefactoringStrategyName().toSimpleName()» extends AbstractJvmModelRenameStrategy {

	public static class Provider extends DefaultRenameStrategy.Provider {

		@Inject
		private IJvmModelAssociations jvmModelAssociations;

		@Override
		public IRenameStrategy get(EObject targetElement, IRenameElementContext renameElementContext) {
			return new «getRefactoringStrategyName().toSimpleName()»(targetElement, getLocationInFileProvider(), jvmModelAssociations);
		}
	}
	
	protected «getRefactoringStrategyName().toSimpleName()»(EObject targetElement, ILocationInFileProvider locationInFileProvider,
			IJvmModelAssociations jvmModelAssociations) {
		super(targetElement, locationInFileProvider, jvmModelAssociations);
	}

	@Override
	protected void setInferredJvmElementName(String name, EObject renamedSourceElement) {
		/*
		 * TODO: rename inferred elements as you would in IJvmModelInferrer 
		 */
	}
}
«ENDFILE»
«ENDIF»
«ENDDEFINE»

«DEFINE addToPluginXmlRt(Boolean generateInferrer) FOR Grammar»
«ENDDEFINE» 


«DEFINE addToPluginXmlUi(Boolean generateInferrer) FOR Grammar»
«ENDDEFINE»


«DEFINE addToStandaloneSetup(Boolean generateInferrer) FOR Grammar»
«ENDDEFINE»

