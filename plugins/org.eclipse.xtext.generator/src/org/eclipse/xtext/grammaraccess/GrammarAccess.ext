/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
import xtext;
import emf;

/**
 * @author Moritz Eysholdt
 */

extension org::eclipse::xtext::GrammarUtil;
extension org::eclipse::xtend::util::stdlib::io;

// ******************************************************************************
// ***  this API can be used by other templates to generate code             ****
// ***  that has hard references to grammar rules/elements                   ****
// ******************************************************************************

/**
 * Converts an arbitary string to a valid Java identifier
 * The string is being split up along the the caracters that are not valid as java 
 * identifier. The first character of each segments is made upper case which 
 * leads to a camel-case style.
 * @param text the string
 * @param uppercaseFirst whether the first character of the returned identifier should be uppercase or lowercase
 * @return the java identifier
 */
String toJavaIdentifier(String text, boolean uppercaseFirst):
	JAVA org.eclipse.xtext.grammaraccess.GrammarAccessUtil.toJavaIdentifier(java.lang.String, java.lang.Boolean);
	
/** 
 * Creates an identifier for a Rule which is a valid Java idetifier and unique within 
 * the Rule's grammar.
 * @param rule the Rule
 * @return the identifier
 */
String gaRuleIdentifyer(AbstractRule rule):
	rule.name.toJavaIdentifier(true);
	
/**
 * Creates an identifier for an AbstractElement which is a valid Java identifier and
 * which is unique whithin the element's rule. The identifier tries to be as 
 * human-readable as possible.
 * @param element the element
 * @return the element's identifier
 */
String gaElementIdentifyer(AbstractElement element):
	JAVA org.eclipse.xtext.grammaraccess.GrammarAccessUtil.getUniqueElementName(org.eclipse.xtext.AbstractElement);

/**
 * Returns the full qulified Java class name of a GrammarAccess implementation for a grammar.
 * @param grammar 
 * @return the GrammarAccess' full qualified Java class name
 */
String gaFQName(Grammar grammar):
	JAVA org.eclipse.xtext.grammaraccess.GrammarAccessUtil.getGrammarAccessFQName(org.eclipse.xtext.Grammar);
	
/**
 * Returns the simple Java class name of a GrammarAccess implementation for a Grammar.
 * The simple class name is defined as the class' name without any package names.
 * @param grammar the grammar
 * @return the GrammarAccess' simple class name
 */
String gaSimpleName(Grammar grammar):
	JAVA org.eclipse.xtext.grammaraccess.GrammarAccessUtil.getGrammarAccessSimpleName(org.eclipse.xtext.Grammar);
	
/**
 * Returns the method name for accessing a rule via a GrammarAccess implementation.
 * @param rule the rule for which the accesor method is needed
 * @return the method's name.
 */
String gaRuleAccessMethodName(LexerRule rule):
	"lr" + rule.gaRuleIdentifyer();
	
/**
 * Returns the method name for accessing a rule via a GrammarAccess implementation.
 * @param rule the rule for which the accesor method is needed
 * @return the method's name.
 */
String gaRuleAccessMethodName(ParserRule rule):
	"pr" + rule.gaRuleIdentifyer();
	
String gaRuleAccessMethodName(AbstractRule rule):
	"unknownRuleType" + rule.gaRuleIdentifyer();

/**
 * Returns the method name for accessing an element via a GrammarAccess implementation.
 * @param element the element for which the accesor method is needed
 * @return the method's name.
 */
String gaElementAccessMethodeName(AbstractElement element):
	"ele" + element.gaElementIdentifyer();

/**
 * Returns the simple class name of a rule's facade. A GrammarAccess implementation has
 * a facade for each parser rule, which contains the methods for accessing the rule's elements.
 * @param rule
 * @return the simple class name
 */	
String gaRuleAccesorClassName(AbstractRule rule):
	rule.gaRuleIdentifyer() + "Elements";
	
/** 
 * Returns a list which contains the grammar itself and all it's super grammars.
 * This is handy to determine all GrammarAccess implementation that have to be 
 * imported by a Java file.
 * @param g a grammar
 * @return all super grammars of g
 */
List[Grammar] includedGrammars(Grammar g):
	if(g.getSuperGrammar() == null) then { g }
	else includedGrammars(g.getSuperGrammar()).add(g);
	
	
/**
 * Returns the invokation of the rule accessor method as Java statement.
 * Example: prStatemachine() 
 * @param rule the rule
 * @return The java statement
 */	
String gaRuleAccessor(AbstractRule rule):
	rule.gaRuleAccessMethodName() + "()";
	
/**
 * Returns the invokation of the element accessor method as Java statement.
 * The called method is implemented by the rule's facade.
 * Example: ele1AssignmentStates()
 * @param ele the element
 * @return The java statement
 */	
String gaElementAccessor(AbstractElement ele):
	ele.gaElementAccessMethodeName() + "()";
	
/**
 * Returns the invokation of the element accessor method for a GrammarAccess 
 * as Java statement.
 * Example: prStatemachine().ele1AssignmentStates()
 * @param ele the element
 * @return The java statement
 */	
String gaRuleElementAccessor(AbstractElement ele):
	ele.containingParserRule().gaRuleAccessor() + "." + ele.gaElementAccessor();
		
/**
 * Returns the invokation of the element accessor method as full qualified Java statement.
 * Example: return FowlerDslTestLanguageGrammarAccess.INSTANCE.prStatemachine().ele1AssignmentStates()
 * @param ele the element
 * @return The java statement
 */	
String gaFullAccessor(AbstractElement ele):
	ele.containingGrammar().gaSimpleName() + ".INSTANCE." + ele.gaRuleElementAccessor();
	



// ******************************************************************************
// ***  the API below is private. Only GrammarAccess.xpt is allowed to use it ***
// ******************************************************************************

String gaElementAccessorLocalVarName(AbstractElement ele):
	"c" + ele.gaElementIdentifyer();
	
String gaRuleAccessorLocalVarName(AbstractRule rule):
	"unknownRule" + rule.gaRuleIdentifyer();

String gaRuleAccessorLocalVarName(ParserRule rule):
	"p" + rule.gaRuleIdentifyer();

String gaRuleAccessorLocalVarName(LexerRule rule):
	"l" + rule.gaRuleIdentifyer();
	
String getClassName(EObject obj):
	JAVA org.eclipse.xtext.grammaraccess.GrammarAccessUtil.getClassName(org.eclipse.emf.ecore.EObject);
	
String loadElementParentStatement(AbstractElement ele):
	if (AbstractElement.isInstance(ele.eContainer)) then
		((AbstractElement)ele.eContainer).gaElementAccessorLocalVarName() 
	else "rule";

String loadElementStatement(AbstractElement ele):
	"(" + ele.getClassName() + ")" + 
	ele.loadElementParentStatement() + 
	".eContents().get("+ele.eContainer.eContents.indexOf(ele)+")";

	
	
	
