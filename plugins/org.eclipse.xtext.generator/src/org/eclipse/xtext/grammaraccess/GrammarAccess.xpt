«REM»
/*******************************************************************************
 * Copyright (c) 2008, 2009 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«REM»
/**
 * @author Moritz Eysholdt
 */
 «ENDREM»

«IMPORT xtext»
«IMPORT xtextgen»

«EXTENSION org::eclipse::xtext::Extensions»
«EXTENSION org::eclipse::xtext::Properties»
«EXTENSION org::eclipse::xtext::grammaraccess::GrammarAccess»
«EXTENSION org::eclipse::xtext::parsetree::reconstr::ParseTreeConstructor»
«EXTENSION org::eclipse::xtext::GrammarUtil»

«DEFINE root FOR GenService»
«FILE genClassFQName.toJavaFilePath() SRC_GEN-»
/*
«fileHeader()»
*/

package «grammar().gaFQName().toJavaPackage()»;

import com.google.inject.Singleton;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.BaseEPackageAccess;

@Singleton
public class «grammar().gaSimpleName()» extends BaseEPackageAccess implements IGrammarAccess {
	«EXPAND parseRuleClasses FOREACH grammar().allParserRules()-»
	
	public final static «grammar().gaSimpleName()» INSTANCE = new «grammar().gaSimpleName()»();

	private static final String «languageName().toUpperCase()»_GRAMMAR_CP_URI = "«grammarResourceURI(grammar())»";
	private static Grammar GRAMMAR = null;
	«EXPAND cache FOREACH grammar().allRules()-»

	@SuppressWarnings("unused")
	public synchronized Grammar getGrammar() {	
		if (GRAMMAR==null) {
			// assert the XtextPackage implementation is loaded
			XtextPackage xtextPackage = XtextPackage.eINSTANCE;
			GRAMMAR = (Grammar) loadGrammarFile(«genClassFQName.toSimpleName()».class.getClassLoader(),«languageName().toUpperCase()»_GRAMMAR_CP_URI);
		}
		return GRAMMAR;
	}

	«EXPAND getter FOREACH grammar().allRules()-»
}
«ENDFILE»
«ENDDEFINE»



«DEFINE parseRuleClasses FOR ParserRule»
	public class «gaRuleAccesorClassName()» implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "«name»");
«FOREACH containedAbstractElements() AS e-»
		private final «e.getClassName()» «e.gaElementAccessorLocalVarName()» = «e.loadElementStatement()»;
«ENDFOREACH-»
		
		// «grammarFragmentToStr()»
		public ParserRule getRule() { return rule; }
«FOREACH containedAbstractElements() AS e»
		// «e.grammarFragmentToStr()»
		public «e.getClassName()» «e.gaElementAccessMethodeName()»() { return «e.gaElementAccessorLocalVarName()»; }
«ENDFOREACH-»
	}
«ENDDEFINE»

	

«DEFINE cache FOR AbstractRule»
	// FIXME: unknown rule type «metaType»
«ENDDEFINE»

«DEFINE cache FOR ParserRule-»
	private static «gaRuleAccesorClassName()» «gaRuleAccessorLocalVarName()»;
«ENDDEFINE»

«DEFINE cache FOR LexerRule-»
	private static LexerRule «gaRuleAccessorLocalVarName()»;
«ENDDEFINE»



«DEFINE getter FOR AbstractRule»
	// FIXME: unknown rule type «metaType»
«ENDDEFINE»

«DEFINE getter FOR ParserRule»
	// «grammarFragmentToStr()»
	public «gaRuleAccesorClassName()» «gaRuleAccessMethodName()»() {
		return («gaRuleAccessorLocalVarName()» != null) ? «gaRuleAccessorLocalVarName()» : («gaRuleAccessorLocalVarName()» = new «gaRuleAccesorClassName()»());
	} 
«ENDDEFINE»

«DEFINE getter FOR LexerRule»
	// «grammarFragmentToStr()»
	public LexerRule «gaRuleAccessMethodName()»() {
		return («gaRuleAccessorLocalVarName()» != null) ? «gaRuleAccessorLocalVarName()» : («gaRuleAccessorLocalVarName()» = (LexerRule) GrammarUtil.findRuleForName(getGrammar(), "«name»"));
	} 
«ENDDEFINE»