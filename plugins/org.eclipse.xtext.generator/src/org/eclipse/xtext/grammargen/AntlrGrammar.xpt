«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»

«EXTENSION org::eclipse::xtext::grammargen::GrammarGen»
«EXTENSION org::eclipse::xtext::TypeResolution»

«DEFINE grammar FOR Grammar»
«FILE pathName()+'/parser/internal/Internal'+languageName()+'.g'»
grammar Internal«languageName()»;

@lexer::header {
package «packageName()».parser.internal;
}

@parser::header {
package «packageName()».parser.internal; 

import org.eclipse.xtext.core.parser.IElementFactory;
import org.eclipse.xtext.core.parsetree.*;
import org.eclipse.emf.ecore.EObject;
}

@parser::members {

private IElementFactory factory;
public Internal«languageName()»Parser(TokenStream input, IElementFactory factory) {
	this(input);
	this.factory = factory;
}

private CompositeNode currentNode;

	public CompositeNode createCompositeNode(EObject currentGrammarElement,
			CompositeNode parentNode) {
		CompositeNode compositeNode = ParsetreeFactory.eINSTANCE
				.createCompositeNode();
		compositeNode.setGrammarElement(currentGrammarElement);
		parentNode.getChildren().add(compositeNode);
		return compositeNode;
	}

	public Object createLeafNode(String text, EObject currentGrammarElement,
			CompositeNode parentNode, String feature) {
		LeafNode leafNode = ParsetreeFactory.eINSTANCE.createLeafNode();
		leafNode.setText(text);
		leafNode.setGrammarElement(currentGrammarElement);
		leafNode.setFeature(feature);
		parentNode.getChildren().add(leafNode);
		return leafNode;
	}
	
	public void associateNodeWithAstElement(AbstractNode node, Object astElement) {
		node.setElement(astElement);
		if(astElement instanceof EObject) {
			EObject eObject = (EObject) astElement;
			NodeAdapter adapter = (NodeAdapter) NodeAdapterFactory.INSTANCE.adapt(eObject, AbstractNode.class);
			adapter.setParserNode(node); 
		}
	}

}

parse returns [Object current] :
	{ currentNode = ParsetreeFactory.eINSTANCE.createCompositeNode(); }
	«parserRules.first().ruleName()» {$current=$«parserRules.first().ruleName()».current;} EOF;

«EXPAND rule FOREACH parserRules»

«EXPAND rule FOREACH allLexerRules()»

«ENDFILE»
«ENDDEFINE»

«DEFINE rule FOR ParserRule»
«ruleName()» returns [Object current=null] : {Object temp=null; currentNode=«EXPAND createCompositeNode» }
	«EXPAND ebnf FOR this.alternatives» { currentNode = currentNode.getParent(); };
«ENDDEFINE»

«DEFINE rule FOR LexerRule»
«ruleName()» : «body»;
«ENDDEFINE»

«DEFINE ebnf FOR AbstractElement»
«IF mustBeParenthesized()»(«EXPAND ebnf2»)«ELSE»«EXPAND ebnf2»«ENDIF»«cardinality-»
«ENDDEFINE»

«DEFINE ebnf2 FOR AbstractElement»ERROR «metaType.name» not matched«ENDDEFINE»

«DEFINE ebnf2 FOR Alternatives»«EXPAND ebnf FOREACH groups SEPARATOR '|'»«ENDDEFINE»

«DEFINE ebnf2 FOR Group»«EXPAND ebnf FOREACH abstractTokens»«ENDDEFINE»

«DEFINE ebnf2 FOR Assignment»
	«localVar()»=«EXPAND ebnf FOR terminal» {if ($current==null) {
	$current = factory.create("«containingParserRule().getReturnTypeName()»");}
	factory.«setOrAdd()»($current, "«feature»",«localVar()»);
	associateNodeWithAstElement(currentNode, $current);}
«ENDDEFINE»

«DEFINE ebnf2 FOR Action»
	{temp=factory.create("«currentType().qualifiedName()»");
	 factory.«setOrAdd()»(temp, "«feature»",$current);
	 $current = temp; 
	 temp = null;
	 associateNodeWithAstElement(currentNode, $current);}
«ENDDEFINE»

«DEFINE ebnf2 FOR Keyword»'«withoutQuotes()»' {«EXPAND createLeafNode»}«ENDDEFINE»

«DEFINE ebnf2 FOR RuleCall-»
«IF ParserRule.isInstance(calledRule()) && !isAssigned()»«localVar()»=«ENDIF-»
«calledRule().ruleName()-»
«IF ParserRule.isInstance(calledRule()) && !isAssigned()»{$current = $«localVar()».current;}«ENDIF-»
«IF LexerRule.isInstance(calledRule())»{«EXPAND createLeafNode»}«ENDIF»
«ENDDEFINE»

«DEFINE createCompositeNode FOR ParserRule-»
createCompositeNode(null, currentNode);«ENDDEFINE»

«DEFINE createLeafNode FOR AbstractElement-»createLeafNode(input.LT(-1).getText(), null, currentNode, 
«IF isAssigned()»"«containingAssignment().feature»"«ELSE»null«ENDIF»);«ENDDEFINE»

