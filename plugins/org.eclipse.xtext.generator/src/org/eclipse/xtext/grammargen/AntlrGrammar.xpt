«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»

«EXTENSION org::eclipse::xtext::grammargen::GrammarGen»
«EXTENSION org::eclipse::xtext::TypeResolution»

«DEFINE grammar FOR Grammar»
«FILE pathName()+'/parser/internal/Internal'+languageName()+'.g'»
grammar Internal«languageName()»;

@lexer::header {
package «packageName()».parser.internal;
}

@parser::header {
package «packageName()».parser.internal; 

import org.eclipse.xtext.core.parser.IElementFactory;
}

@parser::members {
private Object currentParserNode;

private IElementFactory factory;
public Internal«languageName()»Parser(TokenStream input, IElementFactory factory) {
	this(input);
	this.factory = factory;
}

}

parse returns [Object current] :
	«parserRules.first().ruleName()» {$current=$«parserRules.first().ruleName()».current;} EOF;

«EXPAND rule FOREACH parserRules»

«EXPAND rule FOREACH allLexerRules()»

«ENDFILE»
«ENDDEFINE»

«DEFINE rule FOR ParserRule»
«ruleName()» returns [Object current=null] : {Object temp=null; currentParserNode=«EXPAND createParserNode» }
	«EXPAND ebnf FOR this.alternatives»;
«ENDDEFINE»

«DEFINE rule FOR LexerRule»
«ruleName()» : «body»;
«ENDDEFINE»

«DEFINE ebnf FOR AbstractElement»
«IF mustBeParenthesized()»(«EXPAND ebnf2»)«ELSE»«EXPAND ebnf2»«ENDIF»«cardinality-»
«ENDDEFINE»

«DEFINE ebnf2 FOR AbstractElement»ERROR «metaType.name» not matched«ENDDEFINE»

«DEFINE ebnf2 FOR Alternatives»«EXPAND ebnf FOREACH groups SEPARATOR '|'»«ENDDEFINE»

«DEFINE ebnf2 FOR Group»«EXPAND ebnf FOREACH abstractTokens»«ENDDEFINE»

«DEFINE ebnf2 FOR Assignment»
	«localVar()»=«EXPAND ebnf FOR terminal» {if ($current==null) {
	$current = factory.create("«containingParserRule().getReturnTypeName()»");
	«EXPAND associateParserNode»}factory.«setOrAdd()»($current, "«feature»",«localVar()»);}
«ENDDEFINE»

«DEFINE ebnf2 FOR Action»
	{temp=factory.create("«currentType().qualifiedName()»");
	 factory.«setOrAdd()»(temp, "«feature»",$current);
	 $current = temp; temp = null;
	 «EXPAND createParserNode»}
«ENDDEFINE»

«DEFINE ebnf2 FOR Keyword»'«withoutQuotes()»' {«EXPAND createParserNode»}«ENDDEFINE»

«DEFINE ebnf2 FOR RuleCall-»
«IF ParserRule.isInstance(calledRule()) && !isAssigned()»«localVar()»=«ENDIF-»
«calledRule().ruleName()-»
«IF ParserRule.isInstance(calledRule()) && !isAssigned()»{$current = $«localVar()».current;}«ENDIF-»
«ENDDEFINE»

«DEFINE createParserNode FOR emf::EObject-»
factory.createParserNode(input, null, currentParserNode);«ENDDEFINE»

«DEFINE associateParserNode FOR Object-»factory.associate(currentParserNode, $current);«ENDDEFINE»
