/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
import xtext;

extension org::eclipse::xtext::Properties reexport;
extension org::eclipse::xtext::Extensions reexport;
extension org::eclipse::xtext::TypeResolution;
extension org::openarchitectureware::util::stdlib::io;

methodName(AbstractRule this) :
	'proceed'+name.toFirstUpper();
	
List[AbstractElement] selectNonOptionalChildren(AbstractElement this) :
	let x = eContents.typeSelect(AbstractElement).select(e|!e.isOptional()) :
		{}.union(x).union(x.selectNonOptionalChildren()).flatten();
	
delegatedCheckPath(AbstractElement this) :
	let x = checkPath() :
	if x==null || !isOptional() 
		then x 
		else '(true ||'+x+')';
		
checkPath(AbstractElement this) : info(metaType.name) -> null;

checkPath(Alternatives this) : 
	let x = groups.delegatedCheckPath().select(x|x!=null) :
		x.isEmpty ? null : '('+x.toString(" || ")+')';
		
checkPath(Group this) : 
	let x = abstractTokens.delegatedCheckPath().select(x|x!=null) :
		x.isEmpty ? null : '('+x.toString(" && ")+')';
		
checkPath(Assignment this) : 'obj.isConsumable("'+feature+'")';
	
checkPath(RuleCall this) :
	if containingAssignment()!=null && calledParserRule()!=null then null 
		else
		calledRule().methodName()+'(obj.newLookaheadDescription())';
	
checkPath(Action this) :
	'obj.isOfType("'+typeName.qualifiedName()+'")';	

followingElementInGroup(AbstractElement this) :
	containingGroup().abstractTokens.get(1);
	
followingActions(AbstractElement this) :
	let x = followingElementInGroup().eAllContents.typeSelect(Action) :
		x==null?{}:x;
		
	