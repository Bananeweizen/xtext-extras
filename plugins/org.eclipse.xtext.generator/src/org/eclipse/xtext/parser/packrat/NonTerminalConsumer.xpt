«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»
«IMPORT xtextgen»

«EXTENSION org::eclipse::xtext::Extensions»
«EXTENSION org::eclipse::xtext::parser::packrat::PackratParserGen»
«EXTENSION org::eclipse::xtext::grammaraccess::GrammarAccess»

«DEFINE root FOR GenService»
«EXPAND nonTerminalConsumer FOREACH grammar().rules.typeSelect(ParserRule).select(e|!e.terminal)»
«ENDDEFINE»

«DEFINE nonTerminalConsumer FOR ParserRule»
«FILE this.fullConsumerClassName().toJavaFilePath() SRC_GEN-»
/*
«fileHeader()»
*/
package «this.consumerPackageName()»;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.AbstractRule;

import org.eclipse.xtext.parser.packrat.IMarkerFactory.IMarker;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import «this.containingGrammar().grammarAccess()».«name»Elements;

«FOREACH allCalledRules() AS calledRule-»
import «calledRule.containingGrammar().getNamespace()».parser.packrat.consumers.«calledRule.consumerClassName()»;
«ENDFOREACH-»

@SuppressWarnings("unused")
public final class «this.consumerClassName()» extends NonTerminalConsumer {

	private «this.name»Elements rule;
	
«FOREACH allCalledRules() AS calledRule-»
	private «calledRule.consumerInterfaceName()» «calledRule.consumerFieldName()»;
«ENDFOREACH-»

«EXPAND delimiterField FOREACH allDelimited()-»
	public «this.consumerClassName()»(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
«EXPAND delimiterFieldInit FOREACH allDelimited()-»
	}
	
	@Override
	protected int doConsume(int entryPoint) throws Exception {
		return «alternatives.consumeMethodName()»(entryPoint);
	}
«EXPAND defineConsume FOR alternatives-»

	public «this.name»Elements getRule() {
		return rule;
	}
	
	public void setRule(«this.name»Elements rule) {
		this.rule = rule;
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
«FOREACH allCalledRules() AS calledRule-»
	public void «calledRule.consumerSetterName()»(«calledRule.consumerInterfaceName()» «calledRule.consumerFieldName()») {
		this.«calledRule.consumerFieldName()» = «calledRule.consumerFieldName()»;
	}
	
«ENDFOREACH-»
«EXPAND delimiterFieldAccessors FOREACH allDelimited()-»
}
«ENDFILE»
«ENDDEFINE»

«DEFINE delimiterField FOR AbstractElement-»
«ERROR "delimiterField for " + metaType.name-»
«ENDDEFINE»

«DEFINE delimiterField FOR RuleCall-»
	private ISequenceMatcher «delimiterFieldName()»;
	
«ENDDEFINE»

«DEFINE delimiterField FOR CrossReference-»
	private ISequenceMatcher «delimiterFieldName()»;
	
«ENDDEFINE»

«DEFINE delimiterField FOR Keyword-»
	private ICharacterClass «delimiterFieldName()»;
	
«ENDDEFINE»

«DEFINE delimiterFieldInit FOR AbstractElement-»
«ERROR "delimiterFieldInit for " + metaType.name-»
«ENDDEFINE»

«DEFINE delimiterFieldInit FOR RuleCall-»
		«delimiterFieldName()» = ISequenceMatcher.Factory.nullMatcher();
«ENDDEFINE»

«DEFINE delimiterFieldInit FOR CrossReference-»
		«delimiterFieldName()» = ISequenceMatcher.Factory.nullMatcher();
«ENDDEFINE»

«DEFINE delimiterFieldInit FOR Keyword-»
		«delimiterFieldName()» = ICharacterClass.Factory.nullClass();
«ENDDEFINE»

«DEFINE delimiterFieldAccessors FOR AbstractElement-»
«ERROR "delimiterFieldAccessors for " + metaType.name-»
«ENDDEFINE»

«DEFINE delimiterFieldAccessors FOR RuleCall-»
	public ISequenceMatcher get«delimiterFieldName().toFirstUpper()»() {
		return «delimiterFieldName()»;
	}
	
	public void set«delimiterFieldName().toFirstUpper()»(ISequenceMatcher matcher) {
		«delimiterFieldName()» = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
«ENDDEFINE»

«DEFINE delimiterFieldAccessors FOR CrossReference-»
	public ISequenceMatcher get«delimiterFieldName().toFirstUpper()»() {
		return «delimiterFieldName()»;
	}
	
	public void set«delimiterFieldName().toFirstUpper()»(ISequenceMatcher matcher) {
		«delimiterFieldName()» = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
«ENDDEFINE»

«DEFINE delimiterFieldAccessors FOR Keyword-»
	public ICharacterClass get«delimiterFieldName().toFirstUpper()»() {
		return «delimiterFieldName()»;
	}
	
	public void set«delimiterFieldName().toFirstUpper()»(ICharacterClass characterClass) {
		«delimiterFieldName()» = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
«ENDDEFINE»

«DEFINE defineConsume FOR AbstractElement-»
«EXPAND defineConsumeDeclaration FOR this-»
«ENDDEFINE»

«DEFINE defineConsume FOR Alternatives-»
«EXPAND defineConsumeDeclaration FOR this-»
«EXPAND defineConsume(this) FOREACH groups-»
«ENDDEFINE»

«DEFINE defineConsume(Alternatives parent) FOR AbstractElement-»
«EXPAND defineConsume FOR this-»
«ENDDEFINE»

«DEFINE defineConsume(Alternatives parent) FOR Alternatives-»
«IF isOptional() || isMultipleCardinality()-»
«EXPAND defineConsume FOR this-»
«ELSE-»
«EXPAND defineConsume(this) FOREACH groups-»
«ENDIF-»
«ENDDEFINE»

«DEFINE defineConsume FOR Group-»
«EXPAND defineConsumeDeclaration FOR this-»
«EXPAND defineConsume(this) FOREACH abstractTokens-»
«ENDDEFINE»

«DEFINE defineConsume(Group parent) FOR AbstractElement-»
«EXPAND defineConsume FOR this-»
«ENDDEFINE»

«DEFINE defineConsume(Group parent) FOR Group-»
«IF isOptional() || isMultipleCardinality()-»
«EXPAND defineConsume FOR this-»
«ELSE-»
«EXPAND defineConsume(this) FOREACH abstractTokens-»
«ENDIF-»
«ENDDEFINE»

«DEFINE defineConsume FOR Assignment-»
«EXPAND defineConsumeDeclaration FOR this-»
«EXPAND defineConsume(this) FOR terminal-»
«ENDDEFINE»

«DEFINE defineConsume(Assignment assignment) FOR AbstractElement-»
«IF isQuestionMark() || isStar() || isPlus()-»
«ERROR "multiplicities are not supported in assignments"»
«ENDIF-»

	protected int «consumeMethodName()»(int entryPoint) throws Exception {
«EXPAND defineConsumeBody(assignment) FOR this-»
	}
«ENDDEFINE»

«DEFINE defineConsume(Assignment assignment) FOR Alternatives-»
«IF isQuestionMark() || isStar() || isPlus()-»
«ERROR "multiplicities are not supported in assignments"»
«ENDIF-»
	protected int «consumeMethodName()»(int entryPoint) throws Exception {
«EXPAND defineConsumeBody(assignment) FOR this-»
	}
	
«EXPAND defineConsume(assignment, this) FOREACH groups-»
«ENDDEFINE»

«DEFINE defineConsume(Assignment assignment, Alternatives parent) FOR AbstractElement-»
«IF isQuestionMark() || isStar() || isPlus()-»
«ERROR "multiplicities are not supported in assignments"»
«ENDIF-»
«EXPAND defineConsume(assignment) FOR this-»
«ENDDEFINE»

«DEFINE defineConsume(Assignment assignment, Alternatives parent) FOR Alternatives-»
«IF isQuestionMark() || isStar() || isPlus()-»
«ERROR "multiplicities are not supported in assignments"»
«ENDIF-»
«EXPAND defineConsume(assignment, this) FOREACH groups-»
«ENDDEFINE»

«DEFINE defineConsume(Assignment assignment) FOR Action-»
«ERROR "actions are not supported in assignments"»
«ENDDEFINE»

«DEFINE defineConsume(Assignment assignment) FOR Group-»
«ERROR "groups are not supported in assignments"»
«ENDDEFINE»

«DEFINE defineConsumeDeclaration FOR AbstractElement-»

	protected int «consumeMethodName()»(int entryPoint) throws Exception {
«IF isQuestionMark()-»
		IMarker marker = mark();
		int result = do«consumeMethodName().toFirstUpper()»(entryPoint);
		if (result != ConsumeResult.SUCCESS)
			marker.rollback();
		else
			marker.commit();
		return ConsumeResult.SUCCESS;
«ELSEIF isStar()-»
		IMarker marker = mark();
		while(do«consumeMethodName().toFirstUpper()»(entryPoint) == ConsumeResult.SUCCESS) {
			marker.flush();
		}
		marker.rollback();
		return ConsumeResult.SUCCESS;
«ELSEIF isPlus()-»
		IMarker marker = mark();
		int result = ConsumeResult.SUCCESS;
		announceNextLevel();
		switch(entryPoint) {
			case -1:
				result = ConsumeResult.EMPTY_MATCH;
			case 0:
				announceNextStep();
				result = do«consumeMethodName().toFirstUpper()»(nextEntryPoint());
			case 1:
				announceNextStep();
				if (result == ConsumeResult.SUCCESS) {
					marker.flush();
					while(do«consumeMethodName().toFirstUpper()»(nextEntryPoint())==ConsumeResult.SUCCESS) {
						marker.flush();
					}
					marker.rollback();
					announceLevelFinished();
					return ConsumeResult.SUCCESS;
				}
				error("Could not find token.", getRule().«gaElementAccessMethodeName()»());
		}
		announceLevelFinished();
		marker.commit();
		return result;
«ELSE-»
«EXPAND defineConsumeBody FOR this-»
«ENDIF-»
	}
«IF isQuestionMark() || isStar() || isPlus()-»

	protected int do«consumeMethodName().toFirstUpper()»(int entryPoint) throws Exception {
«EXPAND defineConsumeBody FOR this-»
	}
«ENDIF-»
«ENDDEFINE»

«DEFINE defineConsumeDeclaration FOR Action-»
«IF isQuestionMark() || isStar() || isPlus()-»
«ERROR "multiplicity is not supported for actions"»
«ENDIF-»
	protected int «consumeMethodName()»(int entryPoint) {
«EXPAND defineConsumeBody FOR this-»
	}
«ENDDEFINE»

«DEFINE defineConsumeBody FOR AbstractElement-»
«ERROR "defineConsumeBody for " + metaType-»
«ENDDEFINE»

«DEFINE defineConsumeBody FOR Action-»
		consumeAction(getRule().«gaElementAccessMethodeName()»(), «operator == "+="»);
		return ConsumeResult.SUCCESS;	
«ENDDEFINE»

«DEFINE defineConsumeBody FOR Alternatives-»
		AlternativesResult result = createAlternativesResult();
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
«EXPAND defineConsumeBodyInternal(this) FOR this-»
		}
		return result.getResult();
«ENDDEFINE»

«DEFINE defineConsumeBodyInternal(Alternatives start) FOR Alternatives-»
«FOREACH groups AS g-»
«IF g.metaType == Alternatives && !g.isOptional() && !g.isMultipleCardinality()-»
«EXPAND defineConsumeBodyInternal(start) FOR (Alternatives)g-»
«ELSE-»
			case «g.indexInAlternatives(start)»:
				result.nextAlternative();
				if (result.isAlternativeDone(«g.consumeMethodName()»(nextEntryPoint()))) { 
					return result.getResult(); 
				}
«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE defineConsumeBody FOR Group-»
		announceNextLevel();
		final IMarker marker = mark();
		int result = ConsumeResult.SUCCESS;
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result = ConsumeResult.EMPTY_MATCH;
«EXPAND defineConsumeBodyInternal(this) FOR this-»
		}
		marker.commit();
		announceLevelFinished();
		return result;
«ENDDEFINE»

«DEFINE defineConsumeBodyInternal(Group start) FOR Group-»
«FOREACH abstractTokens AS token-»
«IF token.metaType == Group && !token.isOptional() && !token.isMultipleCardinality()-»
«EXPAND defineConsumeBodyInternal(start) FOR (Group)token-»
«ELSE-»
			case «token.indexInGroup(start)»:
				announceNextStep();
				result = «token.consumeMethodName()»(nextEntryPoint());
				if (result!=ConsumeResult.SUCCESS) {
					error("Another token expected.", getRule().«token.gaElementAccessMethodeName()»());
					marker.commit();
					announceLevelFinished();
					return result;
				}
«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE defineConsumeBody FOR Keyword-»
		return consumeKeyword(getRule().«gaElementAccessMethodeName()»(), null, false, false, get«delimiterFieldName().toFirstUpper()»());
«ENDDEFINE»

«DEFINE defineConsumeBody FOR RuleCall-»
«EXPAND defineConsumeBody(this) FOR rule-»
«ENDDEFINE»

«DEFINE defineConsumeBody(RuleCall call) FOR AbstractRule-»
«ERROR "defineConsumeBody for " + metaType.name-» 
«ENDDEFINE»

«DEFINE defineConsumeBody(RuleCall call) FOR LexerRule-»
		return consumeTerminal(«consumerFieldName()», null, false, false, getRule().«call.gaElementAccessMethodeName()»(), get«call.delimiterFieldName().toFirstUpper()»());
«ENDDEFINE»

«DEFINE defineConsumeBody(RuleCall call) FOR ParserRule-»
«IF !terminal-»
		return consumeNonTerminal(«consumerFieldName()», null, false, «isDatatypeRule()», false, getRule().«call.gaElementAccessMethodeName()»());
«ELSE-»
		return consumeTerminal(«consumerFieldName()», null, false, false, getRule().«call.gaElementAccessMethodeName()»(), get«call.delimiterFieldName().toFirstUpper()»());
«ENDIF-»
«ENDDEFINE»

«DEFINE defineConsumeBody FOR Assignment-»
		return «terminal.consumeMethodName()»(entryPoint);
«ENDDEFINE»

«DEFINE defineConsumeBody(Assignment assignment) FOR AbstractElement-»
«ERROR "defineConsumeBody(Assignment) for " + metaType.name»
«ENDDEFINE»

«DEFINE defineConsumeBody(Assignment assignment) FOR Keyword-»
		return consumeKeyword(getRule().«gaElementAccessMethodeName()»(), "«assignment.feature»", «assignment.isMultiple()», «assignment.isBoolean()», get«delimiterFieldName().toFirstUpper()»());
«ENDDEFINE»

«DEFINE defineConsumeBody(Assignment assignment) FOR CrossReference-»
«EXPAND defineConsumeBody(assignment, this) FOR rule-»
«ENDDEFINE»

«DEFINE defineConsumeBody(Assignment assignment, CrossReference reference) FOR AbstractRule-»
«ERROR "defineConsumeBody(Assignment, CrossReference) for " + metaType.name»
«ENDDEFINE»

«DEFINE defineConsumeBody(Assignment assignment, CrossReference reference) FOR LexerRule-»
		return consumeTerminal(«consumerFieldName()», "«assignment.feature»", «assignment.isMultiple()», «assignment.isBoolean()», getRule().«reference.gaElementAccessMethodeName()»(), get«reference.delimiterFieldName().toFirstUpper()»());
«ENDDEFINE»

«DEFINE defineConsumeBody(Assignment assignment, CrossReference reference) FOR ParserRule-»
«IF !terminal-»
		return consumeNonTerminal(«consumerFieldName()», "«assignment.feature»", «assignment.isMultiple()», «isDatatypeRule()», «assignment.isBoolean()», getRule().«reference.gaElementAccessMethodeName()»());
«ELSE-»
		return consumeTerminal(«consumerFieldName()», "«assignment.feature»", «assignment.isMultiple()», «assignment.isBoolean()», getRule().«reference.gaElementAccessMethodeName()»(), get«reference.delimiterFieldName().toFirstUpper()»());
«ENDIF-»
«ENDDEFINE»

«DEFINE defineConsumeBody(Assignment assignment) FOR RuleCall-»
«EXPAND defineConsumeBody(assignment, this) FOR rule-»
«ENDDEFINE»

«DEFINE defineConsumeBody(Assignment assignment, RuleCall call) FOR AbstractRule-»
«ERROR "defineConsumeBody(Assignment, RuleCall) for " + metaType.name»
«ENDDEFINE»

«DEFINE defineConsumeBody(Assignment assignment, RuleCall call) FOR LexerRule-»
		return consumeTerminal(«consumerFieldName()», "«assignment.feature»", «assignment.isMultiple()», «assignment.isBoolean()», getRule().«call.gaElementAccessMethodeName()»(), get«call.delimiterFieldName().toFirstUpper()»());
«ENDDEFINE»

«DEFINE defineConsumeBody(Assignment assignment, RuleCall call) FOR ParserRule-»
«IF !terminal-»
		return consumeNonTerminal(«consumerFieldName()», "«assignment.feature»", «assignment.isMultiple()», «isDatatypeRule()», «assignment.isBoolean()», getRule().«call.gaElementAccessMethodeName()»());
«ELSE-»
		return consumeTerminal(«consumerFieldName()», "«assignment.feature»", «assignment.isMultiple()», «assignment.isBoolean()», getRule().«call.gaElementAccessMethodeName()»(), get«call.delimiterFieldName().toFirstUpper()»());
«ENDIF-»
«ENDDEFINE»

«DEFINE defineConsumeBody(Assignment assignment) FOR Alternatives-»
«IF isQuestionMark() || isStar() || isPlus()-»
«ERROR "multiplicity is not supported for alternatives in assignments"»
«ENDIF-»
		AlternativesResult result = createAlternativesResult();
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
«EXPAND defineConsumeBodyInternal(assignment, this) FOR this-»
		}
		return result.getResult();
«ENDDEFINE»

«DEFINE defineConsumeBodyInternal(Assignment assignment, Alternatives start) FOR Alternatives-»
«FOREACH groups AS g-»
«IF g.metaType == Alternatives && !g.isOptional() && !g.isMultipleCardinality()-»
«EXPAND defineConsumeBodyInternal(assignment, start) FOR (Alternatives)g-»
«ELSE-»
			case «g.indexInAlternatives(start)»:
				result.nextAlternative();
				if (result.isAlternativeDone(«g.consumeMethodName()»(nextEntryPoint()))) { 
					return result.getResult(); 
				}
«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE»
