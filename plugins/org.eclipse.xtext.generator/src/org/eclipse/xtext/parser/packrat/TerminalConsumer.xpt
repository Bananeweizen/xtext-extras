«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»
«IMPORT xtextgen»

«EXTENSION org::eclipse::xtext::Extensions»
«EXTENSION org::eclipse::xtext::parser::packrat::PackratParserGen»
«EXTENSION org::eclipse::xtext::grammaraccess::GrammarAccess»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE root FOR GenService»
«EXPAND terminalConsumer FOREACH grammar().rules.typeSelect(ParserRule).select(e|e.terminal)»
«ENDDEFINE»

«DEFINE terminalConsumer FOR ParserRule»
«FILE this.fullConsumerClassName().toJavaFilePath() SRC_GEN-»
/*
«fileHeader()»
*/
package «this.consumerPackageName()»;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.parser.packrat.ICharSequenceWithOffset;
import org.eclipse.xtext.parser.packrat.IMarkerFactory;
import org.eclipse.xtext.parser.packrat.IMarkerFactory.IMarker;
import org.eclipse.xtext.parser.packrat.consumers.AbstractRuleAwareTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.tokens.IParsedTokenAcceptor;

import «this.grammar().grammarAccess()»;

«FOREACH allCalledRules() AS calledRule-»
import «calledRule.grammar().getNamespace()».parser.packrat.consumers.«calledRule.consumerClassName()»;
«ENDFOREACH-»

@SuppressWarnings("unused")
public final class «this.consumerClassName()» extends AbstractRuleAwareTerminalConsumer {

«FOREACH allCalledRules() AS calledRule-»
	private «calledRule.consumerClassName()» «calledRule.consumerFieldName()»;
«ENDFOREACH-»

	public «this.consumerClassName()»(ICharSequenceWithOffset input, IMarkerFactory markerFactory,
			IParsedTokenAcceptor tokenAcceptor) {
		super(input, markerFactory, tokenAcceptor);
	}
	
	protected boolean doConsume() {
		return «alternatives.consumeMethodName()»();
	}
«EXPAND defineConsume FOR alternatives-»

	public AbstractRule doGetRule() {
		return «grammar().grammarAccess().toSimpleName()».INSTANCE.pr«this.name»().getRule();
	}
	
«FOREACH allCalledRules() AS calledRule-»
	public void «calledRule.consumerSetterName()»(«calledRule.consumerClassName()» «calledRule.consumerFieldName()») {
		this.«calledRule.consumerFieldName()» = «calledRule.consumerFieldName()»;
	}
	
«ENDFOREACH-»
}
«ENDFILE»
«ENDDEFINE»

«DEFINE defineConsume FOR AbstractElement-»
«EXPAND defineConsumeDeclaration FOR this-»
«ENDDEFINE»

«DEFINE defineConsume FOR Alternatives-»
«EXPAND defineConsumeDeclaration FOR this-»
«EXPAND defineConsume(this) FOREACH groups-»
«ENDDEFINE»

«DEFINE defineConsume(Alternatives parent) FOR AbstractElement-»
«EXPAND defineConsume FOR this-»
«ENDDEFINE»

«DEFINE defineConsume(Alternatives parent) FOR Alternatives-»
«IF isOptional() || isMultipleCardinality()-»
«EXPAND defineConsume FOR this-»
«ELSE-»
«EXPAND defineConsume(this) FOREACH groups-»
«ENDIF-»
«ENDDEFINE»

«DEFINE defineConsume FOR Group-»
«EXPAND defineConsumeDeclaration FOR this-»
«EXPAND defineConsume(this) FOREACH abstractTokens-»
«ENDDEFINE»

«DEFINE defineConsume(Group parent) FOR AbstractElement-»
«EXPAND defineConsume FOR this-»
«ENDDEFINE»

«DEFINE defineConsume(Group parent) FOR Group-»
«IF isOptional() || isMultipleCardinality()-»
«EXPAND defineConsume FOR this-»
«ELSE-»
«EXPAND defineConsume(this) FOREACH abstractTokens-»
«ENDIF-»
«ENDDEFINE»

«DEFINE defineConsume FOR NegatedToken-»
«EXPAND defineConsumeDeclaration FOR this-»
«EXPAND defineConsume(this) FOR terminal-»
«ENDDEFINE»

«DEFINE defineConsume FOR UpToToken-»
«EXPAND defineConsumeDeclaration FOR this-»
«EXPAND defineConsume FOR terminal-»
«ENDDEFINE»

«DEFINE defineConsume(NegatedToken parent) FOR AbstractElement-»
«EXPAND defineConsume FOR this-»
«ENDDEFINE»

«DEFINE defineConsume(NegatedToken parent) FOR NegatedToken-»
«IF isOptional() || isMultipleCardinality()-»
«EXPAND defineConsume FOR this-»
«ELSE-»
«EXPAND defineConsume(this) FOR terminal-»
«ENDIF-»
«ENDDEFINE»

«DEFINE defineConsumeDeclaration FOR AbstractElement-»

	protected boolean «consumeMethodName()»() {
«IF isQuestionMark()-»
		do«consumeMethodName().toFirstUpper()»();
		return true;
«ELSEIF isStar()-»
		while(do«consumeMethodName().toFirstUpper()»()) {}
		return true;
«ELSEIF isPlus()-»
		if (do«consumeMethodName().toFirstUpper()»()) {
			while(do«consumeMethodName().toFirstUpper()»()) {}
			return true;
		}
		return false;
«ELSE-»
«EXPAND defineConsumeBody FOR this-»
«ENDIF-»
	}
«IF isQuestionMark() || isStar() || isPlus()-»

	protected boolean do«consumeMethodName().toFirstUpper()»() {
«EXPAND defineConsumeBody FOR this-»
	}
«ENDIF-»
«ENDDEFINE»

«DEFINE defineConsumeBody FOR AbstractElement-»
«ERROR "defineConsumeBody for " + metaType-»
«ENDDEFINE»

«DEFINE defineConsumeBody FOR Alternatives-»
«EXPAND defineConsumeBodyInternal FOR this-»
		return false;
«ENDDEFINE»

«DEFINE defineConsumeBodyInternal FOR Alternatives-»
«FOREACH groups AS g-»
«IF g.metaType == Alternatives && !g.isOptional() && !g.isMultipleCardinality()-»
«EXPAND defineConsumeBodyInternal FOR (Alternatives)g-»
«ELSE-»
		if («g.consumeMethodName()»())
			return true;
«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE defineConsumeBody FOR NegatedToken-»
«EXPAND defineConsumeBodyInternal FOR this-»
		return false;
«ENDDEFINE»

«DEFINE defineConsumeBodyInternal FOR NegatedToken-»
«IF terminal.metaType == NegatedToken && !terminal.isOptional() && !terminal.isMultipleCardinality()-»
«EXPAND defineConsumeBodyInternal FOR (NegatedToken)terminal-»
«ELSE-»
		final IMarker marker = mark();
		if (!eof() && !«terminal.consumeMethodName()»()) {
			incOffset();
			return true;
		}
		marker.rollback();
«ENDIF-»
«ENDDEFINE»

«DEFINE defineConsumeBody FOR UpToToken-»
		final IMarker marker = mark();
		while(!eof()) {
			if(«terminal.consumeMethodName()»())
				return true;
			incOffset();
		}
		marker.rollback();
		return false;
«ENDDEFINE»

«DEFINE defineConsumeBody FOR Group-»
		final IMarker marker = mark();
«EXPAND defineConsumeBodyInternal FOR this-»
		return true;
«ENDDEFINE»

«DEFINE defineConsumeBodyInternal FOR Group-»
«FOREACH abstractTokens AS token-»
«IF token.metaType == Group && !token.isOptional() && !token.isMultipleCardinality()-»
«EXPAND defineConsumeBodyInternal FOR (Group)token-»
«ELSE-»
		if (!«token.consumeMethodName()»()) {
			marker.rollback();
			return false;
		}
«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE defineConsumeBody FOR Keyword-»
«IF value.length == 1-»
		return readChar('«value.replaceAll("'", "\\\\'")»');
«ELSE-»
		return readString("«value»");
«ENDIF-»
«ENDDEFINE»

«DEFINE defineConsumeBody FOR Wildcard-»
		return readAnyChar();
«ENDDEFINE»

«DEFINE defineConsumeBody FOR CharacterRange-»
		return readCharBetween('«left.value.replaceAll("'", "\\\\'")»', '«right.value.replaceAll("'", "\\\\'")»');
«ENDDEFINE»

«DEFINE defineConsumeBody FOR RuleCall-»
«EXPAND defineConsumeBody(this) FOR rule-»
«ENDDEFINE»

«DEFINE defineConsumeBody(RuleCall call) FOR AbstractRule-»
«ERROR "defineConsumeBody for " + metaType.name-» 
«ENDDEFINE»

«DEFINE defineConsumeBody(RuleCall call) FOR ParserRule-»
		return «consumerFieldName()».consume();
«ENDDEFINE»

