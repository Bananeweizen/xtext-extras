«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»
«IMPORT xtextgen»

«EXTENSION org::eclipse::xtext::Extensions»
«EXTENSION org::eclipse::xtext::Properties»
«EXTENSION org::eclipse::xtext::parsetree::reconstr::ParseTreeConstructor»
«EXTENSION org::eclipse::xtend::util::stdlib::collections»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE root FOR GenService»
«FILE genClassFQName.toJavaFilePath()-»
/*
«fileHeader()»
*/
package «genClassFQName.toJavaPackage()»;


import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.*;
import org.eclipse.xtext.parsetree.reconstr.impl.*;

public class «genClassFQName.toSimpleName()» extends AbstractParseTreeConstructor {

	protected void internalDoUpdate(EObject obj, String ruleToCall, IParseTreeConstructorCallback callback) {
		AbstractToken t = internalSerialize(obj);
		if(t == null) throw new XtextSerializationException(getDescr(obj), "Couldn't find rule '"+ruleToCall+"'");
		t.executeAllCallbacks(callback);
		System.out.println("success!");
	}
	
	protected AbstractToken internalSerialize(EObject obj) {
«FOREACH grammar().allParserRules() AS pr ITERATOR i-»
		«IF i.firstIteration»AbstractToken «ENDIF»t = new «pr.alternatives.elementMethodName()»(null);
«IF i.lastIteration-»
		return t.createFirstSolution(getDescr(obj));
«ELSE-»
		t = t.createFirstSolution(getDescr(obj));
		if(t != null) return t;
«ENDIF-»
«ENDFOREACH-»		
	}
	
«EXPAND rule FOREACH grammar().allParserRules()-»
}
«ENDFILE»
«ENDDEFINE»

«DEFINE rule FOR ParserRule-»
/************ begin Rule «name» ****************/

«EXPAND element FOR alternatives-»

/************ end Rule «name» ****************/
«ENDDEFINE»

«DEFINE constructor FOR AbstractElement-»
	public «elementMethodName()»(AbstractToken predecessor) {
		super(predecessor, «IF !cardinality.isMulti()»!«ENDIF»IS_MANY, «IF !cardinality.isRequired()»!«ENDIF»IS_REQUIRED);
	}
	
	private «elementMethodName()»(AbstractToken predecessor, boolean many, boolean required) {
		super(predecessor, many, required);
	}
	
	protected AbstractToken newInstance(AbstractToken predecessor) {
		return new «elementMethodName()»(predecessor, true, false);
	}
«ENDDEFINE»

«DEFINE element FOR AbstractElement»
// FIXME: unhandled element «metaType.name» in «elementMethodName()» 
«ENDDEFINE»





«REM» ************ Groups ************* «ENDREM»

«DEFINE element FOR Group»
protected class «elementMethodName()» extends GroupToken {
	
«EXPAND constructor»
		
	protected AbstractToken createOneChild(AbstractToken predecessor) {
		AbstractToken t1 = new «abstractTokens.get(1).elementMethodName()»(predecessor);
		predecessor = t1.createFirstSolution(object);
		if(predecessor == null) return null;
		AbstractToken t0 = new «abstractTokens.get(0).elementMethodName()»(predecessor);
		predecessor = t0.createFirstSolution(t1.getObject());
		if(predecessor == null) return null;
		object = t0.getObject();
		return predecessor;
	}

	public void executeCallback(IParseTreeConstructorCallback callback) {
	}
}
«EXPAND element FOREACH abstractTokens»
«ENDDEFINE»



«REM» ************ Alternatives ************* «ENDREM»

«DEFINE element FOR Alternatives»
protected class «elementMethodName()» extends GroupToken {
	
	private int currentOption = «groups.size - 1»;

«EXPAND constructor»
	
	protected boolean activateNextOption() {
		if(currentOption > 0) {
			currentOption--;
			return true;
		}
		return false;
	}
	
	protected AbstractToken createOneChild(AbstractToken predecessor) {
		AbstractToken t, r;
		do {		
			switch(currentOption) {
«FOREACH groups.inverse() AS t ITERATOR i-»
			case «i.counter0»: t = new «((AbstractElement)t).elementMethodName()»(predecessor); break;
«ENDFOREACH-»
			default: throw new RuntimeException("Undefinex Index: "+currentOption);
			}
			r = t.createFirstSolution(predecessor.getObject());
		} while (r == null && activateNextOption());
		if(r != null)
			object = t.getObject();
		return r;
	}

	public void executeCallback(IParseTreeConstructorCallback callback) {
	}
}
«EXPAND element FOREACH groups»
«ENDDEFINE»



«REM» ************ RuleCall ************* «ENDREM»

«DEFINE element FOR RuleCall»
protected class «elementMethodName()» extends RuleCallToken {
	
«EXPAND constructor»
	
	protected AbstractToken createOneChild(AbstractToken predecessor) {
«IF calledParserRule() != null-»
		if(checkForRecursion()) return null;
		if(!predecessor.getObject().isInstanceOf("«calledParserRule().getReturnTypeName()»")) return null;
		AbstractToken t = new «calledParserRule().alternatives.elementMethodName()»(predecessor);
		predecessor = t.createFirstSolution(object);
		if(predecessor != null)
			object = t.getObject();
		return predecessor;
«ELSE-»
		// lexer rule call
		return this;
«ENDIF-»
	}

	public void executeCallback(IParseTreeConstructorCallback callback) {
	}
}
«ENDDEFINE»


«REM» ************ Assignment ************* «ENDREM»

«DEFINE assignmentCreate FOR AbstractElement-»
		// FIXME: doing nothing for «metaType»
«ENDDEFINE»

«DEFINE assignmentCreate FOR Keyword-»
		// nothing special needs to be done for «metaType»
«ENDDEFINE»

«DEFINE assignmentCreate FOR Alternatives-»
«FOREACH containedKeywords() AS k-»
		if("«k.value.replaceAll("\\\\","\\\\\\\\").replaceAll("\\\"","\\\\\\\"")»".equals(value))
			element = (AbstractElement)getGrammarElement("«k.objectURI()»");
		else «ENDFOREACH-»
		return null;
«ENDDEFINE»

«DEFINE assignmentCreate FOR RuleCall-»
«IF calledParserRule()!=null-»
		if(!predecessor.getObject().isInstanceOf("«calledParserRule().getReturnTypeName()»")) return null;
		AbstractToken t = new «calledParserRule().alternatives.elementMethodName()»(predecessor);
		predecessor = t.createFirstSolution(getDescr((EObject)value));
		if(predecessor == null) return null;
«ELSE-»
«ENDIF-»
«ENDDEFINE»

«DEFINE assignmentCallback FOR AbstractElement-»
		// FIXME: doing nothing for «metaType»
«ENDDEFINE»

«DEFINE assignmentCallback FOR Keyword-»
		callback.keywordCall(object, (Keyword)element);
«ENDDEFINE»

«DEFINE assignmentCallback FOR Alternatives-»
		if(element instanceof Keyword)
			callback.keywordCall(object, (Keyword)element);
«ENDDEFINE»

«DEFINE assignmentCallback FOR RuleCall-»
«IF calledParserRule()!=null-»
		// Nothing to do for ParserRule Call «name»
«ELSE-»
		callback.lexerRuleCall(getObject(), (RuleCall) element, value);
«ENDIF-»
«ENDDEFINE»

«DEFINE element FOR Assignment»
protected class «elementMethodName()» extends AssignmentToken  {

	protected AbstractElement element = (AbstractElement)getGrammarElement("«terminal.objectURI()»");
	protected Object value;
	
«EXPAND constructor»
	
	protected AbstractToken createOneChild(AbstractToken predecessor) {
		IInstanceDescription obj = object.createClone();
		if(!obj.isConsumable("«feature»")) return null;
		value = obj.consume("«feature»");
		«EXPAND assignmentCreate FOR terminal-»
		object = (InstanceDescription)obj;
		return predecessor;
	}
	
	public void executeCallback(IParseTreeConstructorCallback callback) {
		// System.out.println("«elementMethodName()»Callback(\"«terminal.metaType.name»\", " + value + ")");
		«EXPAND assignmentCallback FOR terminal-»
	}
}
«ENDDEFINE»



«REM» ************ Action ************* «ENDREM»

«DEFINE element FOR Action»
protected class «elementMethodName()» extends AssignmentToken  {

«EXPAND constructor»
	
	protected AbstractToken createOneChild(AbstractToken predecessor) {
		if(!object.isInstanceOf("«typeName.name»")) return null;
		IInstanceDescription obj = object.createClone();
		if(!obj.isConsumable("«feature»")) return null;
		Object val = obj.consume("«feature»");
		if(!obj.isConsumed()) return null;
		object = getDescr((EObject)val);
		return predecessor;
	}
	
	public void executeCallback(IParseTreeConstructorCallback callback) {
	}
}
«ENDDEFINE»



«REM» ************ Keyword ************* «ENDREM»

«DEFINE element FOR Keyword»

protected class «elementMethodName()» extends KeywordToken  {

	protected Keyword keyword = (Keyword)getGrammarElement("«objectURI()»");
	
	public «elementMethodName()»(AbstractToken predecessor) {
		super(predecessor, !IS_MANY, «IF !cardinality.isRequired()»!«ENDIF»IS_REQUIRED);
	}
		
	protected AbstractToken newInstance(AbstractToken predecessor) {
		throw new UnsupportedOperationException();
	}
	
	protected AbstractToken createOneChild(AbstractToken predecessor) {
		return predecessor;
	}
	
	public void executeCallback(IParseTreeConstructorCallback callback) {
«IF cardinality.isRequired()-»
		callback.keywordCall(object, keyword);
«ELSEIF cardinality.isOptional()-»
		// This keyword ('«value»') is optional (cardinality == «cardinality») and thereby not serialized.
«ELSE-»
		// FIXME: unknown cardinality '«cardinality»' 
«ENDIF-»		
	}
}
«ENDDEFINE»

