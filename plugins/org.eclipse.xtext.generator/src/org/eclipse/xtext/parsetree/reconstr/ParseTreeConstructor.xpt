«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»
«IMPORT xtextgen»
«IMPORT emf»

«EXTENSION org::eclipse::xtext::Extensions»
«EXTENSION org::eclipse::xtext::Properties»
«EXTENSION org::eclipse::xtext::parsetree::reconstr::ParseTreeConstructor»
«EXTENSION org::eclipse::xtext::grammaraccess::GrammarAccess»
«EXTENSION org::eclipse::xtend::util::stdlib::collections»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE root FOR GenService»
«FILE genClassFQName.toJavaFilePath() SRC_GEN-»
/*
«fileHeader()»
*/
package «genClassFQName.toJavaPackage()»;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.*;
import org.eclipse.xtext.parsetree.reconstr.impl.*;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
«FOREACH grammar().includedGrammars() AS g-»
import «g.gaFQName()»;
«ENDFOREACH»

public class «genClassFQName.toSimpleName()» extends AbstractParseTreeConstructor {
		
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
«FOREACH grammar().allParserRules() AS pr-»
«IF !pr.isDatatypeRule()-»
		if(inst.isInstanceOf("«pr.type.type.name»") && (s = new «pr.alternatives.elementMethodName()»(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
«ENDIF-»
«ENDFOREACH-»		
		return null;
	}
	
«EXPAND rule FOREACH grammar().allParserRules()-»
}
«ENDFILE»
«ENDDEFINE»

«DEFINE rule FOR ParserRule-»
«IF !isDatatypeRule()»
/************ begin Rule «name» ****************
 *
 * «grammarFragmentToStr()»
 *
 **/

«EXPAND element FOR alternatives-»

/************ end Rule «name» ****************/
«ENDIF»
«ENDDEFINE»

«DEFINE constructor FOR AbstractElement-»
	public «elementMethodName()»(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, «IF !cardinality.isMulti()»!«ENDIF»IS_MANY, «IF !cardinality.isRequired()»!«ENDIF»IS_REQUIRED);
	}
	
	public «metaType.simpleName()» getGrammarElement() {
		return «gaFullAccessor()»;
	}
«ENDDEFINE»

«DEFINE element FOR AbstractElement»
// FIXME: unhandled element «metaType.name» in «elementMethodName()» 
«ENDDEFINE»





«REM» ************ Groups ************* «ENDREM»

«DEFINE element FOR Group»
// «grammarFragmentToStr()»
protected class «elementMethodName()» extends GroupToken {
	
«EXPAND constructor-»
		
	protected Solution createSolution() {	
		Solution s1 = new «abstractTokens.get(1).elementMethodName()»(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new «abstractTokens.get(0).elementMethodName()»(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 == null) {
				s1 = s1.getPredecessor().nextSolution(this,s1);
				if(s1 == null) return null;
			} else {
				last = s2.getPredecessor();
				return s2;
			}
		}
		return null;
		
	}
}
«EXPAND element FOREACH abstractTokens»
«ENDDEFINE»



«REM» ************ Alternatives ************* «ENDREM»

«DEFINE element FOR Alternatives»
// «grammarFragmentToStr()»
protected class «elementMethodName()» extends AlternativesToken {

«EXPAND constructor-»
	
	protected Solution createSolution() {
		AbstractToken t = (first) ? new «groups.get(1).elementMethodName()»(current, this) : new «groups.get(0).elementMethodName()»(current, this);
		Solution s = t.firstSolution();
		if(s == null && activateNextSolution()) s = createSolution();
		if(s == null) return null;
		last = s.getPredecessor();
		return s; 
	}
}
«EXPAND element FOREACH groups»
«ENDDEFINE»



«REM» ************ RuleCall ************* «ENDREM»

«DEFINE element FOR RuleCall»
// «grammarFragmentToStr()»
protected class «elementMethodName()» extends RuleCallToken {
	
«EXPAND constructor-»
	
	protected Solution createSolution() {
«IF calledParserRule() != null-»
		if(checkForRecursion(«calledParserRule().alternatives.elementMethodName()».class, current)) return null;
		if(!current.isInstanceOf("«calledParserRule().type.type.name»")) return null;
		return new «calledParserRule().alternatives.elementMethodName()»(current, this).firstSolution();
«ELSE-»
		// FIXME: lexer rule call
		return null;
«ENDIF-»
	}
}
«ENDDEFINE»


«REM» ************ Assignment ************* «ENDREM»

«DEFINE assignmentCreate FOR AbstractElement-»
		// FIXME: doing nothing for «metaType»
«ENDDEFINE»

«DEFINE assignmentCreate FOR Keyword-»
		if("«value.replaceAll("\\\\","\\\\\\\\").replaceAll("\\\"","\\\\\\\"")»".equals(value)) { // «metaType.name»
			type = AssignmentType.KW;
			element = «gaFullAccessor()»;
			return new Solution(obj);
		}
«ENDDEFINE»

«DEFINE assignmentCreate FOR CrossReference-»
		if(value instanceof EObject) { // «metaType.name»
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf("«type.type.name»")) {
				type = AssignmentType.CR;
				element = «gaFullAccessor()»; 
				return new Solution(obj);
			}
		}
«ENDDEFINE»

«DEFINE assignmentCreate FOR RuleCall-»
«IF calledParserRule()!=null-»
«IF !isDatatypeRule(calledParserRule())»
		if(value instanceof EObject) { // «metaType.name»
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf("«calledParserRule().type.type.name»")) {
				Solution s = new «calledParserRule().alternatives.elementMethodName()»(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}
«ELSE»
		if(true) { // «metaType.name» FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = «gaFullAccessor()»;
			return new Solution(obj);
		}
«ENDIF»
«ELSE-»
		if(true) { // «metaType.name» FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = «gaFullAccessor()»;
			return new Solution(obj);
		}
«ENDIF-»
«ENDDEFINE»


«DEFINE element FOR Assignment»
// «grammarFragmentToStr()»
protected class «elementMethodName()» extends AssignmentToken  {
	
«EXPAND constructor-»
	
	protected Solution createSolution() {
		if((value = current.getConsumable("«feature»",«IF !isAssignmentRequired()»!«ENDIF»IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("«feature»");
		«EXPAND assignmentCreate FOREACH getNestedElementsFromAssignment()-»
		return null;
	}
}
«ENDDEFINE»



«REM» ************ Action ************* «ENDREM»

«DEFINE element FOR Action»
// «grammarFragmentToStr()»
protected class «elementMethodName()» extends ActionToken  {

«EXPAND constructor-»
	
	protected Solution createSolution() {
		if(!current.isInstanceOf("«typeName.type.name»")) return null;
		Object val = current.getConsumable("«feature»", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("«feature»")) return null;
		return new Solution(getDescr((EObject)val));
	}
}
«ENDDEFINE»



«REM» ************ Keyword ************* «ENDREM»

«DEFINE element FOR Keyword»
// «grammarFragmentToStr()»
protected class «elementMethodName()» extends KeywordToken  {
	
	public «elementMethodName()»(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, «IF !cardinality.isRequired()»!«ENDIF»IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return «gaFullAccessor()»;
	}	
}
«ENDDEFINE»


«REM» ************ CrossReference ************* «ENDREM»

«DEFINE element FOR CrossReference»
// «grammarFragmentToStr()»
protected class «elementMethodName()» extends AbstractToken  {

«EXPAND constructor-»
	
	protected Solution createSolution() {
		// FIXME: This class has been generated because there is an unassigned 
		// CrossReference in your grammar. This means your grammar is invalid, 
		// since CrossReferences are only allowed inside Assignments.
		return null;
	}
}
«ENDDEFINE»

