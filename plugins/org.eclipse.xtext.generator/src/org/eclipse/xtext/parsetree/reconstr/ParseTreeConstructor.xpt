«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»
«IMPORT xtextgen»
«IMPORT emf»

«EXTENSION org::eclipse::xtext::Extensions»
«EXTENSION org::eclipse::xtext::Properties»
«EXTENSION org::eclipse::xtext::parsetree::reconstr::ParseTreeConstructor»
«EXTENSION org::eclipse::xtend::util::stdlib::collections»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE root FOR GenService»
«FILE genClassFQName.toJavaFilePath()-»
/*
«fileHeader()»
*/
package «genClassFQName.toJavaPackage()»;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.*;
import org.eclipse.xtext.parsetree.reconstr.impl.*;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;


public class «genClassFQName.toSimpleName()» extends AbstractParseTreeConstructor {

	protected void internalSerialize(EObject obj, IParseTreeConstructorCallback strategy) {
		Solution t = internalSerialize(obj);
		if(t == null) throw new XtextSerializationException(getDescr(obj), "No rule found for serialization");
		t.getPredecessor().executeAllCallbacks(strategy);
	}
	
	protected Solution internalSerialize(EObject obj) {
		InstanceDescription inst = getDescr(obj);
		Solution s;
«FOREACH grammar().allParserRules() AS pr-»
		if(inst.isInstanceOf("«pr.getReturnTypeName()»") && (s = new «pr.alternatives.elementMethodName()»(inst, null).firstSolution()) != null) return s;
«ENDFOREACH-»		
		return null;
	}
	
«EXPAND rule FOREACH grammar().allParserRules()-»
}
«ENDFILE»
«ENDDEFINE»

«DEFINE rule FOR ParserRule-»
/************ begin Rule «name» ****************
 *
 * «grammarFragmentToStr()»
 *
 **/

«EXPAND element FOR alternatives-»

/************ end Rule «name» ****************/

«ENDDEFINE»

«DEFINE constructor FOR AbstractElement-»
	public «elementMethodName()»(InstanceDescription curr, AbstractToken pred) {
		super(curr, pred, «IF !cardinality.isMulti()»!«ENDIF»IS_MANY, «IF !cardinality.isRequired()»!«ENDIF»IS_REQUIRED);
	}
«ENDDEFINE»

«DEFINE element FOR AbstractElement»
// FIXME: unhandled element «metaType.name» in «elementMethodName()» 
«ENDDEFINE»





«REM» ************ Groups ************* «ENDREM»

«DEFINE element FOR Group»
// «grammarFragmentToStr()»
protected class «elementMethodName()» extends GroupToken {
	
«EXPAND constructor»
		
	protected Solution createSolution() {
		Solution s1 = new «abstractTokens.get(1).elementMethodName()»(current, this).firstSolution();
		if(s1 == null) return null;
		return new «abstractTokens.get(0).elementMethodName()»(s1.getCurrent(), s1.getPredecessor()).firstSolution();
	}
}
«EXPAND element FOREACH abstractTokens»
«ENDDEFINE»



«REM» ************ Alternatives ************* «ENDREM»

«DEFINE element FOR Alternatives»
// «grammarFragmentToStr()»
protected class «elementMethodName()» extends GroupToken {
	
	private boolean first = true;

«EXPAND constructor»
	
	protected boolean activateNextSolution() {
		if(first) {
			first = false;
			return true;
		}
		return false;
	}
	
	protected Solution createSolution() {
		AbstractToken t = (first) ? new «groups.get(1).elementMethodName()»(current, this) : new «groups.get(0).elementMethodName()»(current, this);
		Solution s = t.firstSolution();
		if(s == null && activateNextSolution()) s = createSolution();
		return s; 
	}
}
«EXPAND element FOREACH groups»
«ENDDEFINE»



«REM» ************ RuleCall ************* «ENDREM»

«DEFINE element FOR RuleCall»
// «grammarFragmentToStr()»
protected class «elementMethodName()» extends RuleCallToken {
	
«EXPAND constructor»
	
	protected Solution createSolution() {
«IF calledParserRule() != null-»
		if(checkForRecursion(«calledParserRule().alternatives.elementMethodName()».class, current)) return null;
		if(!current.isInstanceOf("«calledParserRule().getReturnTypeName()»")) return null;
		return new «calledParserRule().alternatives.elementMethodName()»(current, this).firstSolution();
«ELSE-»
		// lexer rule call
		return this;
«ENDIF-»
	}
}
«ENDDEFINE»


«REM» ************ Assignment ************* «ENDREM»

«DEFINE assignmentCreate FOR AbstractElement-»
		// FIXME: doing nothing for «metaType»
		return null;
«ENDDEFINE»

«DEFINE assignmentCreate FOR Keyword-»
		return new Solution(obj);
«ENDDEFINE»

«DEFINE assignmentCreate FOR Alternatives-»
«FOREACH containedKeywords() AS k-»
		if("«k.value.replaceAll("\\\\","\\\\\\\\").replaceAll("\\\"","\\\\\\\"")»".equals(value))
			element = (AbstractElement)getGrammarElement("«k.objectURI()»");
		else «ENDFOREACH-»
		return null;
		return new Solution(obj);
«ENDDEFINE»

«DEFINE assignmentCreate FOR RuleCall-»
«IF calledParserRule()!=null-»
		InstanceDescription param = getDescr((EObject)value);
		if(!param.isInstanceOf("«calledParserRule().getReturnTypeName()»")) return null;
		AbstractToken t = new «calledParserRule().alternatives.elementMethodName()»(param, this);
		Solution s =  t.firstSolution();
		if(s == null) return null;
		return new Solution(obj,s.getPredecessor());
«ELSE-»
		return new Solution(obj);
«ENDIF-»
«ENDDEFINE»

«DEFINE assignmentCallback FOR AbstractElement-»
		// FIXME: doing nothing for «metaType»
«ENDDEFINE»

«DEFINE assignmentCallback FOR Keyword-»
		callback.keywordCall(current, (Keyword)element);
«ENDDEFINE»

«DEFINE assignmentCallback FOR Alternatives-»
		if(element instanceof Keyword)
			callback.keywordCall(current, (Keyword)element);
«ENDDEFINE»

«DEFINE assignmentCallback FOR RuleCall-»
«IF calledParserRule()!=null-»
		// Nothing to do for ParserRule Call «name»
«ELSE-»
		callback.lexerRuleCall(current, (RuleCall) element, value);
«ENDIF-»
«ENDDEFINE»

«DEFINE element FOR Assignment»
// «grammarFragmentToStr()»
protected class «elementMethodName()» extends AssignmentToken  {
	//private static Logger logger = Logger.getLogger(«elementMethodName()».class);
	protected AbstractElement element = (AbstractElement)getGrammarElement("«terminal.objectURI()»");
	protected Object value;
	
«EXPAND constructor»
	
	protected Solution createSolution() {
		if(!current.isConsumable("«feature»")) return null;
		InstanceDescription obj = (InstanceDescription)current.createClone();
		value = obj.consume("«feature»");
		// handling «terminal.metaType»
		«EXPAND assignmentCreate FOR terminal-»
	}
	
	public void executeCallback(IParseTreeConstructorCallback callback) {
		// logger.debug("«elementMethodName()»Callback(\"«terminal.metaType.name»\", " + value + ")");
		«EXPAND assignmentCallback FOR terminal-»
	}
}
«ENDDEFINE»



«REM» ************ Action ************* «ENDREM»

«DEFINE element FOR Action»
// «grammarFragmentToStr()»
protected class «elementMethodName()» extends AssignmentToken  {

«EXPAND constructor»
	
	protected Solution createSolution() {
		if(!current.isInstanceOf("«typeName.name»")) return null;
		if(!current.isConsumable("«feature»")) return null;
		IInstanceDescription obj = current.createClone();
		Object val = obj.consume("«feature»");
		if(!obj.isConsumed()) return null;
		return new Solution(getDescr((EObject)val));
	}
}
«ENDDEFINE»



«REM» ************ Keyword ************* «ENDREM»

«DEFINE element FOR Keyword»
// «grammarFragmentToStr()»
protected class «elementMethodName()» extends KeywordToken  {

	protected Keyword keyword = (Keyword)getGrammarElement("«objectURI()»");
	
	public «elementMethodName()»(InstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, «IF !cardinality.isRequired()»!«ENDIF»IS_REQUIRED);
	}
	
	protected Solution createSolution() {
		return new Solution();
	}
	
	public void executeCallback(IParseTreeConstructorCallback callback) {
«IF cardinality.isRequired()-»
		callback.keywordCall(current, keyword);
«ELSEIF cardinality.isOptional()-»
		// This keyword ('«value»') is optional (cardinality == «cardinality») and thereby not serialized.
«ELSE-»
		// FIXME: unknown cardinality '«cardinality»' 
«ENDIF-»		
	}
}
«ENDDEFINE»

