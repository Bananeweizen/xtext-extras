/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
import xtext;

extension org::eclipse::xtext::Properties reexport;

List[String] services() :
		{'Parser', 'ASTFactory', 'ParseTreeConstructor', 'ResourceFactory', 'GrammarAccess', 'MetamodelAccess'};
		
String serviceInterface(Grammar this, String serviceName) :
	switch(serviceName) {
		case 'Parser': 'org.eclipse.xtext.parser.IParser'
		case 'ASTFactory': 'org.eclipse.xtext.parser.IElementFactory'
		case 'ParseTreeConstructor': 'org.eclipse.xtext.parsetree.IParseTreeConstructor'
		case 'ResourceFactory': 'org.eclipse.xtext.resource.IResourceFactory'
		case 'GrammarAccess': 'org.eclipse.xtext.IGrammarAccess'
		case 'MetamodelAccess': 'org.eclipse.xtext.IMetamodelAccess'
		default: ''
	};
		
String serviceClass(Grammar this, String serviceName) :
	switch(serviceName) { 
		case 'Parser': languageName() + 'Parser'
		case 'ASTFactory': 'org.eclipse.xtext.parser.GenericEcoreElementFactory'
		case 'ParseTreeConstructor': languageName() + 'ParseTreeConstructor'
		case 'ResourceFactory': 'org.eclipse.xtext.resource.XtextResourceFactory'
		case 'GrammarAccess': languageName() + 'GrammarAccess'
		case 'MetamodelAccess': languageName() + 'MetamodelAccess'
		default: ''
	};

String serviceClassFQN(Grammar this, String serviceName) :
    switch(serviceName) { 
        case 'ASTFactory': serviceClass(serviceName)
        case 'ResourceFactory': serviceClass(serviceName)        
        default: packageName() + subpackage(serviceName) + '.' + serviceClass(serviceName)
    };
    
String servicePackageName(Grammar this, String serviceName) :
    packageName() + subpackage(serviceName);
    
String serviceClassFileName(Grammar this, String serviceName) :
    serviceClassFQN(serviceName).replaceAll('\\.','/') + '.java';
    
private String subpackage(String serviceName) :
    switch(serviceName) {
        case 'Parser': '.parser'
        case 'ASTFactory': '.services'
        case 'ParseTreeConstructor': ''
        case 'ResourceFactory': ''
        case 'GrammarAccess': '.services'
        case 'MetamodelAccess': '.services'
        default: ''
    };
