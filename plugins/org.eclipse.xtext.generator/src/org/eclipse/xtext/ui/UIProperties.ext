/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
import xtext;
import xtextgen;

extension org::eclipse::xtext::Extensions;
extension org::eclipse::xtext::Properties reexport;

// Candidates for generation parameters

projectName(GenModel this):
    uiPluginBundleID;

packageName(GenModel this):
    grammar.getNamespace();
    
//foo(GenModel this) :
//	this.packageName();
    
editorClassFQN(GenModel this):
    packageName() + ".ui.editor." + this.grammar.getName()+"Editor";

activatorClassFQN(GenModel this):
    packageName() + ".ui.internal." + this.grammar.getName()+"Activator";
    
//editorPackage(GenModel this):
//    packageName() + ".ui.editor";
    
//editorClassFQN(GenModel this):    
//    editorPackage() + "." + languageName() + "XtextEditor";
    
editorExtensionId(GenModel this):
    editorClassFQN();

uiProposalProviderClass() :
	grammar().getId() + "ProposalProvider";
	
xtendProposalProvider() :
	grammar().getId() + "Proposals";

xtendGenProposalProvider() :
	grammar().getNamespace() + ".Gen" + grammar().getName() + "Proposals";

languageKeywordId(GenModel this):
	packageName() + ".ui.keyword_"+languageName();

create ecore::EClass entity(ecore::EClass clazz) :
	clazz.eRootContainer.eAllContents.typeSelect(ecore::EReference).select(e|e.name=="foo").first();