«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»
«IMPORT xtextgen»

«EXTENSION org::eclipse::xtend::util::stdlib::globalvar»
«EXTENSION org::eclipse::xtext::Extensions»
«EXTENSION org::eclipse::xtext::Properties»
«EXTENSION org::eclipse::xtext::ui::UIProperties»
«EXTENSION org::eclipse::xtext::ui::contentassist::ContentAssist»

«DEFINE root FOR GenModel»
«IF useXtend()»
	«EXPAND GenXtendProposals»
	«EXPAND XtendProposals»
	«EXPAND ContentAssistExtensionInvoker»
«ENDIF»
«ENDDEFINE»

«DEFINE GenXtendProposals FOR GenModel»
«FILE uiGenProposalProviderClass().toXtendFilePath() UI_SRC_GEN-»
/*
«fileHeader()»
*/

import xtext;

import org::eclipse::emf::ecore;
import org::eclipse::jface::text::contentassist;
import org::eclipse::xtext::crossref;
import org::eclipse::xtext::ui::common::editor::contentassist;
import org::eclipse::xtext::ui::common::xtend::contentassist;

«FOREACH grammar().metamodelDeclarations AS mm-»
import «mm.ePackage.name»;
«ENDFOREACH-»

extension org::eclipse::xtext::ui::common::xtend::contentassist::ContentAssist reexport;
extension org::eclipse::xtend::util::stdlib::io;

/**
 * Represents a generated, default implementation of interface {@link IProposalProvider}.
 * 
 * @see org.eclipse.xtext.ui.common.editor.contentassist.IProposalProvider
 */

«LET {} AS processedFqnFeatureNames»«
	FOREACH grammar().containedAssignments() AS assignment»«
		LET getFqFeatureName(assignment) AS fqnFeatureName»«
			IF !processedFqnFeatureNames.contains(fqnFeatureName)»«
				processedFqnFeatureNames.add(fqnFeatureName)->""»	 
List[ICompletionProposal] complete«fqnFeatureName»(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("complete«fqnFeatureName» feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->«
				IF CrossReference.isInstance(assignment.terminal)»
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);«
				ELSEIF RuleCall.isInstance(assignment.terminal) && ((RuleCall)assignment.terminal).rule.name=="ID" »
    { newProposal(assignment, "«fqnFeatureName»", contentAssistContext) };«
   				ELSEIF RuleCall.isInstance(assignment.terminal) && ((RuleCall)assignment.terminal).rule.name=="INT" »
	{ newProposal(assignment, "1", contentAssistContext) };« 
				ELSEIF RuleCall.isInstance(assignment.terminal) && ((RuleCall)assignment.terminal).rule.name=="STRING" »
	{ newProposal(assignment, "\"«fqnFeatureName»\"", contentAssistContext) };«
				ELSE»
	{};«				
				ENDIF»«
			ENDIF»
«		ENDLET»«
	ENDFOREACH-»    
«   FOREACH getParserRulesWithType() AS parserRule»«
		LET getFqFeatureName(parserRule) AS fqnFeatureName»«
			IF !processedFqnFeatureNames.contains(fqnFeatureName)»«
				processedFqnFeatureNames.add(fqnFeatureName)->""»	 	  
List[ICompletionProposal] complete«fqnFeatureName»(RuleCall ruleCall, IContentAssistContext contentAssistContext) :
	{};
«			ENDIF»«
		ENDLET»«
	ENDFOREACH»«
ENDLET»
/*
	// TODO 
    @Override
	protected String getDefaultImageFilePath() {
		return "icons/editor.gif";
	}

	@Override
	protected String getPluginId() {
		return UI_PLUGIN_ID;
	}
*/
«ENDFILE»
«ENDDEFINE»

«DEFINE XtendProposals FOR GenModel»
«FILE uiProposalProviderClass().toXtendFilePath() UI_SRC-»
/*
«fileHeader()»
*/

import xtext;

import org::eclipse::jface::text::contentassist;
import org::eclipse::xtext::crossref;
import org::eclipse::xtext::ui::common::editor::contentassist;
import org::eclipse::xtext::ui::common::xtend::contentassist;

«FOREACH grammar().metamodelDeclarations AS mm-»
import «mm.ePackage.name»;
«ENDFOREACH-»

extension org::eclipse::xtext::ui::common::xtend::contentassist::ContentAssist;
extension «uiGenProposalProviderClass().toXtendFqName()»;

/**
 * Customize functions defined in «uiGenProposalProviderClass().toXtendFilePath()» here.
 */

«ENDFILE»
«ENDDEFINE»

«DEFINE ContentAssistExtensionInvoker FOR GenModel»
«FILE uiContentAssistXtendInvokerClass().toJavaFilePath() UI_SRC_GEN-»
/*
«fileHeader()»
*/

package «uiContentAssistXtendInvokerClass().toJavaPackage()»;

import java.util.List;

import org.apache.log4j.Logger;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.ui.common.editor.contentassist.impl.IContentAssistInvocationHandler;
import org.eclipse.xtext.ui.common.xtend.AbstractXtendService;
import org.eclipse.xtext.ui.common.xtend.NoSuchExtensionException;

/**
 * A {@link IContentAssistInvocationHandler} that calls Xtend extensions.
 * 
 * @author Jan Köhnlein - Initial contribution and API
 */
public class «uiContentAssistXtendInvokerClass().toSimpleName()» extends AbstractXtendService implements IContentAssistInvocationHandler {

	private static final Logger log = Logger.getLogger(«uiContentAssistXtendInvokerClass().toSimpleName()».class);

	@Override
	protected ClassLoader getClassLoader() {
		return this.getClass().getClassLoader();
	}
	
	@Override
	protected String getMasterXtendFileName() {
		// TODO fix in template: use once generated xtend file 
		return "«uiProposalProviderClass().toXtendFqName()»";
	}
	
	@SuppressWarnings("unchecked")
	public List<? extends ICompletionProposal> invoke(String functionName, List<Class<?>> parameterTypes,
			List<?> parameterValues) {
		try {
			Object result = invokeExtension(functionName, parameterValues);
			List<ICompletionProposal> proposals = (List<ICompletionProposal>) result;
			return proposals;
		}
		catch(NoSuchExtensionException nsee) {
			return null;
		}
		catch(ClassCastException cce) {
			log.error("Extension " + functionName + " must return a Collection of ICompletionProposals.", cce);
		}
		catch(Throwable e) {
			log.error("Error invoking extension " + functionName, e);
		}
		return null;
	}
}
«ENDFILE»
«ENDDEFINE»