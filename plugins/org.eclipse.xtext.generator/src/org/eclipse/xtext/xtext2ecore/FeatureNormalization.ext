/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/

import ecore;
import xtext;
import xtextutil;

extension org::openarchitectureware::util::stdlib::io;
extension org::eclipse::xtext::xtext2ecore::Xtext2Ecore;
extension org::eclipse::xtext::XtextUtil;

normalize(Grammar g) :
	g.getAllMetaModels().select(e|e.isGenerate()).collect(e|normalizeFeatures(e.getEPackage(),e));
	
	
// TODO make sure that only generated EClasses get modified

EPackage normalizeFeatures(EPackage ePackage,MetaModel mm) :
	let allClassifiers = ePackage.eClassifiers.typeSelect(EClass)	 :
		allClassifiers.collect(
			superType | 
			normalizeFeatures(
				superType, superType.findSubTypes(allClassifiers)
			)
		) ->
		ePackage
;

List[EClass] findSubTypes(EClass superType, List[EClass] candidates) :
	candidates.select(subType|subType.eSuperTypes.contains(superType))
;

normalizeFeatures(EClass superType, List[EClass] subTypes) :
	subTypes.commonFeatures().collect(cf | 
		//info("Lifting common feature " + cf.name + " to superclass " + superType.name) ->
		superType.eStructuralFeatures.add(cf) ->
		subTypes.eStructuralFeatures.select(f|cf.isSameAs(f))
			.collect(f1| f1.eContainingClass.eStructuralFeatures.remove(f1))
	) ->
	subTypes.commonFeatures(superType).collect(cf | 
		//info("Removing superclass feature " + cf.name + " from subclass " + cf.eContainingClass.name) ->
		cf.eContainingClass.eStructuralFeatures.remove(cf))
;

List[EStructuralFeature] commonFeatures(List[EClass] subTypes) :
	subTypes.first().eStructuralFeatures.select(
		candidate | candidate.isCommonFeature(subTypes)) 
;

List[EStructuralFeature] commonFeatures(EClass this, EClass that) :
	this.eStructuralFeatures.select(
		candidate | candidate.isCommonFeature({that})) 
;

boolean isCommonFeature(EStructuralFeature candidate, List[EClass] subTypes) :
	subTypes.forAll(
		subType | subType.eStructuralFeatures.exists(
			feature | feature.isSameAs(candidate)
		)
	)
;

boolean isSameAs(EStructuralFeature this, EStructuralFeature that) :
	this.metaType == that.metaType 
	&& this.name == that.name 
	&& this.eType == that.eType 
	&& this.upperBound == that.upperBound
;