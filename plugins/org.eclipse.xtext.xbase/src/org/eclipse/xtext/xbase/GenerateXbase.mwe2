/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
module org.eclipse.xtext.xbase.GenerateXbase

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtext.generator.parser.antlr.*

var projectName = "org.eclipse.xtext.xbase"
var runtimeProject = "../${projectName}"
var uiProject = "${runtimeProject}.ui"
var backtrack = true
var memoize = true

Workflow {
	bean = StandaloneSetup { 
		platformUri = "${runtimeProject}/../.."
	}

	component = DirectoryCleaner {
		directory="${runtimeProject}/emf-gen"
	}
	
	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = "platform:/resource/${projectName}/model/Xbase.genmodel"
		srcPath ="platform:/resource/${projectName}/src"
	}

	component = DirectoryCleaner {
		directory="${uiProject}/src-gen"
	}
	component = DirectoryCleaner {
		directory="${runtimeProject}/src-gen"
	}
	
	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = uiProject
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		
		language = {
			uri = "classpath:/org/eclipse/xtext/xbase/Xtype.xtext" 
			fileExtensions="___xtype"
			fragment = grammarAccess.GrammarAccessFragment {}
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
			fragment = contentAssist.JavaBasedContentAssistFragment {}
		}
		language = { 
			uri = "classpath:/org/eclipse/xtext/xbase/Xbase.xtext" 	
			fileExtensions = "___xbase"
			fragment = grammarAccess.GrammarAccessFragment {}
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = "___xbase"
			}
			fragment = XtextAntlrGeneratorFragment {
				options = auto-inject {}
			}
			fragment = validation.JavaValidatorFragment {}
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = types.TypesGeneratorFragment {}
			fragment = builder.BuilderIntegrationFragment {}
			fragment = formatting.FormatterFragment {}
			fragment = quickfix.QuickfixProviderFragment {}
			fragment = labeling.LabelProviderFragment {}
			fragment = outline.OutlineTreeProviderFragment {}
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			fragment = XtextAntlrUiGeneratorFragment {
				options = auto-inject {}
			}
		}
	}
}