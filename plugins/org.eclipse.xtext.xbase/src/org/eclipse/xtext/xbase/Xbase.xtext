/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
grammar org.eclipse.xtext.xbase.Xbase with org.eclipse.xtext.xbase.Xpression

import "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.ecore"
import "platform:/resource/org.eclipse.xtext.xbase/model/Xpression.ecore" as xpression
import "platform:/resource/org.eclipse.xtext.xbase/model/Xtype.ecore" as xtype
import "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore" as types

XFile  : 	
    ('package' package=QualifiedName)?
	(imports+=XImport)*
	(classes+=XClass)*
;

XImport  : 
	'import' importedNamespace=XQualifiedNameWithWildCard
;

XQualifiedNameWithWildCard :
	QualifiedName  ('.' '*')?;
	
XClass :
   ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')? "class" name=ID ("extends" superTypes+=JvmTypeReference)? ('implements' superTypes+=JvmTypeReference)* '{'
	   (members+=XMember)*
   '}';

XMember returns types::JvmMember:
	XFunction;

XFunction:
	('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
	(returnType=JvmTypeReference)? name=ID '(' (parameters+=JvmFormalParameter (',' parameters+=JvmFormalParameter)*)? ')'
		(':' expression=XExpression ';' | expression=XBlockExpression);


