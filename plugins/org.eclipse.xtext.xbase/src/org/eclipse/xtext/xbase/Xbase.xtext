/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
grammar org.eclipse.xtext.xbase.Xbase with org.eclipse.xtext.xbase.Xtype

import "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.ecore"
import "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore" as types
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

XExpression returns XExpression :
	XAssignment;

XAssignment returns XExpression :
	{XAssignment} feature=[types::JvmIdentifyableElement|ID] OpSingleAssign value=XAssignment |	
	XOrExpression (
		{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpMultiAssign] rightOperand=XAssignment)?;

OpSingleAssign:
	'='
;

OpMultiAssign:
	'+=';

XOrExpression returns XExpression:
	XAndExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpOr] rightOperand=XAndExpression)*;

OpOr:
	'||';

XAndExpression returns XExpression:
	XEqualityExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpAnd] rightOperand=XEqualityExpression)*;

OpAnd:
	'&&';

XEqualityExpression returns XExpression:
	XRelationalExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpEquality]
	rightOperand=XRelationalExpression)*;

OpEquality:
	'==' | '!=';

XRelationalExpression returns XExpression:
	XOtherOperatorExpression
	({XInstanceOfExpression.expression=current} 'instanceof' type=[types::JvmType|QualifiedName] |
	{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpCompare] rightOperand=XOtherOperatorExpression)*;

OpCompare:
	'>=' | '<=' | '>' | '<';

XOtherOperatorExpression returns XExpression:
	XAdditiveExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpOther]
	rightOperand=XAdditiveExpression)*;

OpOther:
	'->' | '..';

XAdditiveExpression returns XExpression:
	XMultiplicativeExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpAdd]
	rightOperand=XMultiplicativeExpression)*;

OpAdd:
	'+' | '-';

XMultiplicativeExpression returns XExpression:
	XUnaryOperation ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpMulti] rightOperand=XUnaryOperation)*;

OpMulti:
	'*' | '**' | '/' | '%';

XUnaryOperation returns XExpression:
	{XUnaryOperation} feature=[types::JvmIdentifyableElement|OpUnary] operand=XMemberFeatureCall
	| XMemberFeatureCall;

OpUnary:
	"!" | "-" | "+";

XMemberFeatureCall returns XExpression:
	XPrimaryExpression
	({XAssignment.assignable=current} '.' feature=[types::JvmIdentifyableElement] OpSingleAssign value=XAssignment
	|{XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|spreading?="*.") 
		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
		feature=[types::JvmIdentifyableElement] (explicitOperationCall?='(' (memberCallArguments+=XExpression (','	memberCallArguments+=XExpression)*)? ')')?)*;

XPrimaryExpression returns XExpression:
	XLiteral |
	XConstructorCall |
	XBlockExpression |
	XSwitchExpression |
	XFeatureCall |
	XIfExpression |
	XForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XCastedExpression|
	XThrowExpression |
	XTryCatchFinallyExpression |
	XParenthesizedExpression;

XLiteral returns XExpression:
	XClosure |
	XBooleanLiteral |
	XIntLiteral |
	XNullLiteral |
	XStringLiteral |
	XTypeLiteral
;

XClosure returns XExpression:
	{XClosure} (formalParameters+=JvmFormalParameter (',' formalParameters+=JvmFormalParameter)*)? '|' expression=XExpression;

XCastedExpression returns XExpression:
	{XCastedExpression}
	'(' type=JvmTypeReference ')' target=XMemberFeatureCall;

XParenthesizedExpression returns XExpression:
	'(' XExpression ')';

XIfExpression returns XExpression:
	{XIfExpression}
	'if' '(' if=XExpression ')'
	then=XExpression
	('else' else=XExpression)?;

XSwitchExpression returns XExpression:
	{XSwitchExpression}
	'switch' switch=XExpressionInsideBlock? '{'
	(cases+=XCasePart)+
	('default' ':' (
		default=XExpression ';' |
		default=XBlockExpression))?
	'}';

XCasePart:
	typeGuard=JvmTypeReference? ('case' case=XExpression)? ':' (
		then=XExpression ';' |
		then=XBlockExpression);

XForLoopExpression returns XExpression:
	{XForLoopExpression}
	'for' '(' declaredParam=JvmFormalParameter ':' forExpression=XExpression ')'
		eachExpression=XExpression;

XWhileExpression returns XExpression:
	{XWhileExpression}
	'while' '(' predicate=XExpression ')'
		body=XExpression;
	
XDoWhileExpression returns XExpression:
	{XDoWhileExpression}
   'do'
       body=XExpression
   'while' '(' predicate=XExpression ')';

XBlockExpression returns XExpression: 
	{XBlockExpression}
	'{'
		(expressions+=XExpressionInsideBlock ';'?)*
	'}';

XExpressionInsideBlock returns XExpression:
	XVariableDeclaration | XExpression;

XVariableDeclaration returns XExpression:
	{XVariableDeclaration}
	(writeable?='var'|'val') (type=JvmTypeReference)? name=ID '=' right=XExpression;

JvmFormalParameter returns types::JvmFormalParameter:
	(parameterType=JvmTypeReference)? name=ID;

XFeatureCall returns XExpression:
	{XFeatureCall}
	('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? 
	feature=[types::JvmIdentifyableElement] (explicitOperationCall?='(' (featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')?;

XConstructorCall returns XExpression:
	{XConstructorCall}
	'new' constructor=[types::JvmConstructor|QualifiedName] 
	('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	'(' (arguments+=XExpression (',' arguments+=XExpression)*)? ')';

XBooleanLiteral returns XExpression :
	{XBooleanLiteral} ('false' | isTrue?='true');

XNullLiteral returns XExpression :
	{XNullLiteral} 'null';

XIntLiteral returns XExpression :
	{XIntLiteral} value=INT;

XStringLiteral returns XExpression:
	{XStringLiteral} value=STRING;

XTypeLiteral returns XExpression :
	{XTypeLiteral} type=[types::JvmType|QualifiedName] '.' 'class';
	
XThrowExpression returns XExpression :
	{XThrowExpression} 'throw' expression=XExpression;
	
XTryCatchFinallyExpression returns XExpression:
	{XTryCatchFinallyExpression}
	'try' 
		expression=XExpression
	(
		(catchClauses+=XCatchClause)+
		('finally' finallyExpression=XExpression)?
	|	'finally' finallyExpression=XExpression
	);
	
XCatchClause :
	'catch' '(' declaredParam=JvmFormalParameter ')' expression=XExpression;


	



