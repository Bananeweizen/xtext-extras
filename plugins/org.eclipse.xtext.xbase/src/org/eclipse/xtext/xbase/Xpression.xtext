/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/

grammar org.eclipse.xtext.xbase.Xpression with org.eclipse.xtext.xbase.Xtype

import "platform:/resource/org.eclipse.xtext.xbase/model/Xpression.ecore"
import "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore" as types

XExpression returns XExpression:
	XAssignment;	

XAssignment returns XExpression : 
    XOrExpression  ({XBinaryOperation.left=current} operator=('='|'+=') right=XOrExpression)?
;

XOrExpression returns XExpression : 
	 XAndExpression ({XBinaryOperation.left=current} operator='||'  right=XAndExpression )*
;

XAndExpression returns XExpression : 
	XEqualityExpression ({XBinaryOperation.left=current} operator='&&' right=XEqualityExpression)*	    
;

XEqualityExpression returns XExpression : 
	XRelationalExpression ({XBinaryOperation.left=current} operator=('=='|'!=') right=XRelationalExpression )*
;

XRelationalExpression returns XExpression : 
	XOtherOperatorExpression 
		({XInstanceOfExpression.expression=current} 'instanceof' type=[types::JvmType|QualifiedName] |
		 {XBinaryOperation.left=current} operator=('>='|'<='|'>'|'<' ) right=XOtherOperatorExpression )*
;

XOtherOperatorExpression returns XExpression: 
	XAdditiveExpression ({XBinaryOperation.left=current} operator=('->'|'..') right=XAdditiveExpression )*
;

XAdditiveExpression returns XExpression :
	XMultiplicativeExpression ({XBinaryOperation.left=current} operator=('+'|'-') right=XMultiplicativeExpression )*	    
;

XMultiplicativeExpression returns XExpression : 
	XUnaryOperation ({XBinaryOperation.left=current} operator=('*'|'**'|'/'|'%') right=XUnaryOperation )*
;


XUnaryOperation returns XExpression :
	{XUnaryOperation} operator=("!"|"-"|"+") target=XFeatureCall |
	{XCastedExpression} '(' type=JvmTypeReference ')' target=XExpression |
	XFeatureCall
;
  

XFeatureCall returns XExpression : 
	XPrimaryExpression 
	  ({XFeatureCall.target=current} "." name=ID ('('(params+=XExpression (','params+=XExpression )*)?')')?)*
;

XPrimaryExpression returns XExpression : 
  XClosure |
  XBooleanLiteral   |  
  XIntLiteral   |  
  XNullLiteral   |  
  XStringLiteral |
  XTypeLiteral |
  XConstructorCall   | 
  XBlockExpression   | 
  XRichString |
  XIfExpression |
  XSwitchExpression |  
  XWhileExpression |
  XSimpleFeatureCall   |  
  XParenthesizedExpression;
  
XClosure returns XExpression :
	{XClosure} (params+=XDeclaredParameter (',' params+=XDeclaredParameter)*)? '|' expression=XExpression
;
  
XParenthesizedExpression returns XExpression: 
	'(' XExpression ')'	    
;

XIfExpression :	
	'if' '('if=XExpression')'
		then=XExpression
	('else' else=XExpression)?
;

XSwitchExpression :
	'switch' switch=XExpression? '{'
		(cases+=XCasePart)+
		('default' ':' default=XExpression)?
	'}'
;

XWhileExpression :
    'while' predicate=XParenthesizedExpression 
    	body=XExpression;

XCasePart :
	'case' case=XExpression ':' then=XExpression;

XBlockExpression  : 
	'{'
		(expressions+=XExpressionInsideBlock ';')+
	'}'	    
;

XExpressionInsideBlock returns XExpression:
	XVariableDeclaration | XExpression;

XVariableDeclaration :
	('def' | type=JvmTypeReference ) name=ID '=' right=XExpression;

XDeclaredParameter :
	(type=JvmTypeReference)? name=ID;

XSimpleFeatureCall returns XFeatureCall  : 
   name=ID ('('(params+=XExpression (',' params+=XExpression )*)?')')?
;

XConstructorCall  : 
	'new' type=JvmTypeReference ('('(params+=XExpression (','params+=XExpression)*)?')')?
	initializer=XBlockExpression?
;

XBooleanLiteral  : 
	{XBooleanLiteral} 'false'|isTrue?='true'
;

XNullLiteral  : 
	{XNullLiteral}'null'
;

XIntLiteral  : 
	value=INT
;

XStringLiteral :
	value=STRING
;

XTypeLiteral :
	type=[types::JvmType|QualifiedName]'.''class';
	
XRichString :	
	expressions+=XRichStringLiteral 
	(expressions+=XExpression
	expressions+=XRichStringLiteral)*
;

XRichStringLiteral :
	value=RICH_STRING;

terminal RICH_STRING	: 
	'»' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'«') )* '«'
;

	



