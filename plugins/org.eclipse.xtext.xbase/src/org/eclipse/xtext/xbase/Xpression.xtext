/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
grammar org.eclipse.xtext.xbase.Xpression with org.eclipse.xtext.xbase.Xtype

import "platform:/resource/org.eclipse.xtext.xbase/model/Xpression.ecore"
import "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore" as types
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

XExpression returns XExpression:
	XAssignment |
	XClosure |
	XRichString |
	XIfExpression |
	XWhileExpression |
	{XCastedExpression} '(' type=JvmTypeReference ')' target=XExpression;

XAssignment returns XExpression:
	XOrExpression ({XBinaryOperation.params+=current} feature=[ecore::EObject|OpAssign] params+=XOrExpression)?;

OpAssign:
	'=' | '+=';

XOrExpression returns XExpression:
	XAndExpression ({XBinaryOperation.params+=current} feature=[ecore::EObject|OpOr] params+=XAndExpression)*;

OpOr:
	'||';

XAndExpression returns XExpression:
	XEqualityExpression ({XBinaryOperation.params+=current} feature=[ecore::EObject|OpAnd] params+=XEqualityExpression)*;

OpAnd:
	'&&';

XEqualityExpression returns XExpression:
	XRelationalExpression ({XBinaryOperation.params+=current} feature=[ecore::EObject|OpEquality]
	params+=XRelationalExpression)*;

OpEquality:
	'==' | '!=';

XRelationalExpression returns XExpression:
	XOtherOperatorExpression
	({XInstanceOfExpression.expression=current} 'instanceof' type=[types::JvmType|QualifiedName] |
	{XBinaryOperation.params+=current} feature=[ecore::EObject|OpCompare] params+=XOtherOperatorExpression)*;

OpCompare:
	'>=' | '<=' | '>' | '<';

XOtherOperatorExpression returns XExpression:
	XAdditiveExpression ({XBinaryOperation.params+=current} feature=[ecore::EObject|OpOther]
	params+=XAdditiveExpression)*;

OpOther:
	'->' | '..';

XAdditiveExpression returns XExpression:
	XMultiplicativeExpression ({XBinaryOperation.params+=current} feature=[ecore::EObject|OpAdd]
	params+=XMultiplicativeExpression)*;

OpAdd:
	'+' | '-';

XMultiplicativeExpression returns XExpression:
	XUnaryOperation ({XBinaryOperation.params+=current} feature=[ecore::EObject|OpMulti] params+=XUnaryOperation)*;

OpMulti:
	'*' | '**' | '/' | '%';

XUnaryOperation returns XExpression:
	{XUnaryOperation} feature=[types::JvmOperation|OpUnary] params+=XFeatureCall
	| XFeatureCall;

OpUnary:
	"!" | "-" | "+";

XFeatureCall returns XExpression:
	XPrimaryExpression
	({XMemberFeatureCall.params+=current} "." feature=[ecore::EObject] ('(' (params+=XExpression (','
	params+=XExpression)*)? ')')?)*;

XPrimaryExpression returns XExpression:
	XBooleanLiteral |
	XIntLiteral |
	XNullLiteral |
	XStringLiteral |
	XTypeLiteral |
	XConstructorCall |
	XBlockExpression |
	XSwitchExpression |
	XSimpleFeatureCall |
	XParenthesizedExpression;

XClosure returns XExpression:
	{XClosure} (params+=JvmFormalParameter (',' params+=JvmFormalParameter)*)? '|' expression=XExpression;

XParenthesizedExpression returns XExpression:
	'(' XExpression ')';

XIfExpression:
	'if' '(' if=XExpression ')'
	then=XExpression
	('else' else=XExpression)?;

XSwitchExpression:
	'switch' switch=XExpression? '{'
	(cases+=XCasePart)+
	('default' ':' default=XExpression)?
	'}';

XCasePart:
	'case' case=XExpression ':' then=XExpression;

XWhileExpression:
	'while' predicate=XParenthesizedExpression
	body=XExpression;

XBlockExpression:
	'{'
	(expressions+=XExpressionInsideBlock ';')+
	'}';

XExpressionInsideBlock returns XExpression:
	XVariableDeclaration | XExpression;

XVariableDeclaration:
	'def' (type=JvmTypeReference)? name=ID '=' right=XExpression;

JvmFormalParameter returns types::JvmFormalParameter:
	(parameterType=JvmTypeReference)? name=ID;

XSimpleFeatureCall returns XFeatureCall:
	feature=[ecore::EObject] ('(' (params+=XExpression (',' params+=XExpression)*)? ')')?;

XConstructorCall:
	'new' type=JvmTypeReference '(' (params+=XExpression (',' params+=XExpression)*)? ')'
	initializer=XBlockExpression?;

XBooleanLiteral:
	{XBooleanLiteral} 'false' | isTrue?='true';

XNullLiteral:
	{XNullLiteral} 'null';

XIntLiteral:
	value=INT;

XStringLiteral:
	value=STRING;

XTypeLiteral:
	type=[types::JvmType|QualifiedName] '.' 'class';

XRichString:
	expressions+=XRichStringLiteral
	(expressions+=XExpressionInRichString
	expressions+=XRichStringLiteral)*;

XExpressionInRichString returns XExpression:
	XAssignment
	| XClosure
	| XIfExpression
	| XWhileExpression
	| {XCastedExpression} '(' type=JvmTypeReference ')' target=XExpression;

XRichStringLiteral:
	value=RICH_STRING;

terminal RICH_STRING:
	'»' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '«' | '\\') | !('\\' | '«'))* '«';

	



