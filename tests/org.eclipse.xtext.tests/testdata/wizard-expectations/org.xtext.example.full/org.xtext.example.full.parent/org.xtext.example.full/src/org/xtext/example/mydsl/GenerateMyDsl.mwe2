module org.xtext.example.mydsl.GenerateMyDsl

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var baseName = "org.xtext.example.full"
var rootPath = ".."

var fileExtensions = "mydsl"

Workflow {
	
	component = XtextGenerator auto-inject {
		configuration = {
			project = WizardConfig auto-inject {
				ideaEditor = true
				webSupport = true
				genericIdeSupport = true
				testingSupport = true
			}
			code = auto-inject {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = auto-inject {
			uri = "platform:/resource/${baseName}/src/org/xtext/example/mydsl/MyDsl.xtext"
			standaloneSetup = {
				//can be removed if Xbase is not used
				loadedResource = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
			}

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment2 auto-inject {}
			
	
			// generates Java API for the generated EPackages
			fragment = adapter.FragmentAdapter { 
				fragment = ecore.EMFGeneratorFragment auto-inject {
					javaModelDirectory = "/${baseName}/src-gen"
					updateBuildProperties = true
				}
			}

			fragment = adapter.FragmentAdapter {
				fragment = serializer.SerializerFragment auto-inject {
					generateStub = false
				}
			}

			// a custom ResourceFactory for use with EMF
			fragment = adapter.FragmentAdapter {
				fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
			}

			// The antlr parser generator fragment.
			fragment = adapter.FragmentAdapter {
				fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}
			}

			// Xtend-based API for validation
			fragment = validation.ValidatorFragment2 auto-inject {
			//	composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment2 auto-inject {}
			fragment = exporting.QualifiedNamesFragment2 auto-inject {}

			// generator API
			fragment = generator.GeneratorFragment2 {}

			// formatter API
			fragment = formatting.Formatter2Fragment2 {}
			
			fragment = junit.Junit4Fragment2 auto-inject {}
			
			fragment = builder.BuilderIntegrationFragment2 auto-inject {}
			// labeling API
			fragment = adapter.FragmentAdapter {
				fragment = labeling.LabelProviderFragment auto-inject {}
			}
			
			// outline API
			fragment = ui.outline.OutlineTreeProviderFragment2 auto-inject {}
			
			// quick outline menu contribution
			fragment = ui.outline.QuickOutlineFragment2 auto-inject {}
			
			// quickfix API
			fragment = ui.quickfix.QuickfixProviderFragment2 auto-inject {}
			
			// content assist API
			fragment = ui.contentAssist.ContentAssistFragment2 auto-inject {}
			
			// provides a preference page for template proposals
			fragment = adapter.FragmentAdapter {
				fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
			}
			
			// rename refactoring
			fragment = adapter.FragmentAdapter {
				fragment = refactoring.RefactorElementNameFragment auto-inject {}
			}
			
			// provides a compare view
			fragment = adapter.FragmentAdapter {
				fragment = compare.CompareFragment auto-inject {}
			}
			// generates a more lightweight Antlr parser and lexer tailored for content assist
			fragment = adapter.FragmentAdapter {
				fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}
			}
			// provides the necessary bindings for java types integration
			fragment = types.TypesGeneratorFragment2 auto-inject {}

			// generates the required bindings only if the grammar inherits from Xbase
			fragment = xbase.XbaseGeneratorFragment2 auto-inject {}

			// generates the required bindings only if the grammar inherits from Xtype
			fragment = xbase.XtypeGeneratorFragment2 auto-inject {}

			// Intellij IDEA integration
			fragment = idea.IdeaPluginGenerator auto-inject {}
			fragment = idea.parser.antlr.XtextAntlrIDEAGeneratorFragment auto-inject {}
			
			// web integration
			fragment = web.WebIntegrationFragment auto-inject {
				framework = "Ace"
				generateServlet = true
				generateJettyLauncher = true
				generateHtmlExample = true
			}
		}
	}
}
