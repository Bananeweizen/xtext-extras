/*
* generated by Xtext
*/
package org.eclipse.xtext.xbase.tests.typesystem;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.common.types.util.FeatureOverridesService;
import org.eclipse.xtext.common.types.util.TypeArgumentContextProvider;
import org.eclipse.xtext.common.types.util.VisibilityService;
import org.eclipse.xtext.linking.LinkingScopeProviderBinding;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.service.SingletonBinding;
import org.eclipse.xtext.xbase.annotations.XbaseWithAnnotationsStandaloneSetup;
import org.eclipse.xtext.xbase.annotations.typesystem.XbaseWithAnnotationsBatchScopeProvider;
import org.eclipse.xtext.xbase.annotations.typesystem.XbaseWithAnnotationsTypeComputer;
import org.eclipse.xtext.xbase.annotations.validation.XbaseWithAnnotationsJavaValidator;
import org.eclipse.xtext.xbase.annotations.validation.XbaseWithAnnotationsJavaValidator2;
import org.eclipse.xtext.xbase.compiler.TypeReferenceSerializer;
import org.eclipse.xtext.xbase.compiler.TypeReferenceSerializer2;
import org.eclipse.xtext.xbase.compiler.XbaseCompiler;
import org.eclipse.xtext.xbase.compiler.XbaseCompiler2;
import org.eclipse.xtext.xbase.interpreter.IExpressionInterpreter;
import org.eclipse.xtext.xbase.interpreter.impl.XbaseInterpreter2;
import org.eclipse.xtext.xbase.resource.BatchLinkableResource;
import org.eclipse.xtext.xbase.scoping.batch.IBatchScopeProvider;
import org.eclipse.xtext.xbase.scoping.batch.XbaseBatchScopeProvider;
import org.eclipse.xtext.xbase.tests.XbaseInjectorProvider;
import org.eclipse.xtext.xbase.tests.XbaseWithAnnotationsInjectorProvider.XbaseWithAnnotationsTestRuntimeModule;
import org.eclipse.xtext.xbase.typesystem.computation.ITypeComputer;
import org.eclipse.xtext.xbase.typesystem.legacy.LegacyFeatureOverridesService;
import org.eclipse.xtext.xbase.typesystem.legacy.LegacyTypeArgumentContextProvider;
import org.eclipse.xtext.xbase.typesystem.legacy.LegacyVisibilityService;
import org.eclipse.xtext.xbase.typesystem.legacy.XbaseBatchTypeProvider;
import org.eclipse.xtext.xbase.typing.XbaseTypeProvider;

import com.google.inject.Binder;
import com.google.inject.Guice;
import com.google.inject.Injector;

/**
 * An injector provider for XbaseWithAnnotation tests with the reworked type system infrastructure.
 * 
 * @author Sebastian Zarnekow - Initial contribution and API
 */
@SuppressWarnings("deprecation")
public class XbaseWithAnnotationsNewTypeSystemInjectorProvider extends XbaseInjectorProvider {

	@Override
	protected Injector internalCreateInjector() {
		return new XbaseWithAnnotationsNewTypeSystemTestStandaloneSetup().createInjectorAndDoEMFRegistration();
	}

	public static class XbaseWithAnnotationsNewTypeSystemTestStandaloneSetup extends XbaseWithAnnotationsStandaloneSetup {
		@Override
		public Injector createInjector() {
			return Guice.createInjector(new XbaseWithAnnotationsNewTypeSystemTestRuntimeModule());
		}
	}

	public static class XbaseWithAnnotationsNewTypeSystemTestRuntimeModule extends XbaseWithAnnotationsTestRuntimeModule {

		@Override
		public Class<? extends IScopeProvider> bindIScopeProvider() {
			return DisabledXbaseScopeProvider.class;
		}

		@Override
		public void configureLinkingIScopeProvider(Binder binder) {
			binder.bind(IScopeProvider.class).annotatedWith(LinkingScopeProviderBinding.class)
					.to(IBatchScopeProvider.class);
		}

		@Override
		public Class<? extends XtextResource> bindXtextResource() {
			return BatchLinkableResource.class;
		}

		public Class<? extends XbaseTypeProvider> bindXbaseTypeProvider() {
			return XbaseBatchTypeProvider.class;
		}
		
		@Override
		public Class<? extends IExpressionInterpreter> bindIExpressionInterpreter() {
			return XbaseInterpreter2.class;
		}
		
		public Class<? extends XbaseCompiler> bindCompiler() {
			return XbaseCompiler2.class;
		}
		
		public Class<? extends ITypeComputer> bindITypeComputer() {
			return XbaseWithAnnotationsTypeComputer.class;
		}
		
		public Class<? extends XbaseBatchScopeProvider> bindBatchScopeProvider() {
			return XbaseWithAnnotationsBatchScopeProvider.class;
		}
		
		@Override
		@SingletonBinding(eager=true)	
		public Class<? extends XbaseWithAnnotationsJavaValidator> bindXbaseWithAnnotationsJavaValidator() {
			return null;
		}
		
		@SingletonBinding(eager=true)	
		public Class<? extends XbaseWithAnnotationsJavaValidator2> bindDefaultXbaseValidator() {
			return XbaseWithAnnotationsJavaValidator2.class;
		}
		
		public Class<? extends VisibilityService> bindVisibilityService() {
			return LegacyVisibilityService.class;
		}
		
		public Class<? extends FeatureOverridesService> bindFeatureOverridesService() {
			return LegacyFeatureOverridesService.class;
		}
		
		@Override
		public Class<? extends TypeArgumentContextProvider> bindTypeArgumentContextProvider() {
			return LegacyTypeArgumentContextProvider.class;
		}
		
		public Class<? extends TypeReferenceSerializer> bindTypeReferenceSerializer() {
			return TypeReferenceSerializer2.class;
		}
		
	}
	
	public static class DisabledXbaseScopeProvider extends org.eclipse.xtext.xbase.scoping.XbaseScopeProvider {
		@Override
		public IScope getScope(EObject context, EReference reference) {
			throw new UnsupportedOperationException();
		}
	}

}
